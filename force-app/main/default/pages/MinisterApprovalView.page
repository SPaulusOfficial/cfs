<apex:page showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0" controller="MinisterApprovalViewController" action="{!caseDeatils}" readOnly="true">

    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
    <head>

        <meta http-equiv="Content-Type" content="text/html;" charset="utf-8" />
        <title>MO View Approval</title>

        <meta http-equiv="x-ua-compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <!--javascript library for salesforce ligthning design system-->
        <apex:stylesheet value="{!URLFOR($Resource.SLDS212, '/assets/styles/salesforce-lightning-design-system-vf.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.JSPDF,'css/bootstrap.min.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.JSPDF,'css/bootstrap-theme.min.css')}" />
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/jquery.min.js')}" />

        <!-- javscript library required to work pdf.js for IE browser-->
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/compatibility.js')}" />
        <!--javascript library to render the pdf in browser-->
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/pdf.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/text_layer_builder.js')}" />
        <!--javascript library required to handle all the events-->
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/hammer.min.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/bootstrap.min.js')}" />
        <!--javascript library too render the template on UI-->
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/jsrender.min.js')}" />
        <!-- javascript library to convert milliseconds into the date -->
        <apex:includeScript value="{!URLFOR($Resource.JSPDF,'js/moment.min.js')}" />

        <!--javascript library used for salesforce ajax toolkit-->
        <script src="/soap/ajax/35.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/35.0/apex.js" type="text/javascript"></script>
        <apex:includeScript value="{!URLFOR($Resource.JSPDF, 'js/svg4everybody.min.js')}" />
        <script>
            svg4everybody();
        </script>
        <!-- javascript library used to open the console tab-->
        <script src="/support/console/33.0/integration.js"/>
        
        <style>
            body {
                margin: 0px;
            }

            .menuItem {
                text-align: center;
            }
            
            canvas {
                width: 100%;
            }
            
            .slds-tabs--default__nav {
                background-color: #FFFFFF;
            }
            
            .slds-tabs--default__content {
                background-color: #e4e4e4;
                overflow-y: scroll;
                height: 100%;
                -webkit-overflow-scrolling: touch;
            }
            
            #responsePDF {
                width: 85%;
                margin: 0 auto;
                position: relative;
            }
            
            #amendmentPDF {
                width: 70%;
                position: relative;
                margin-top: 1rem;
                margin-left: 1rem;
                -webkit-overflow-scrolling: touch;
                float: left;
            }
            
            .slds-popover {
                min-height: 14rem;
                max-height: 30rem;
                width: 100%;
                margin-right: 5%;
                margin-top: 1rem;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            .tfnsw-arxxus .slds-popover {
                width: 100%;
            }
            
            .center {
                text-align: center;
            }
            
            div.show-icon {
                /* To correctly align image, regardless of content height: */
                vertical-align: top;
                display: inline-block;
                /* To horizontally center images and caption */
                text-align: center;
                /* The width of the container also implies margin around the images. */
                width: 24.5%;
            }
            
            .caption {
                /* Make the caption a block so it occupies its own line. */
                display: block;
                font-size: 0.70rem;
            }
            
            .footer {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            .rejectionCommentBox {
                -webkit-appearance: none;
                width: 100% !Important;
                height: 30vh !Important;
                border-radius: 10px !Important;
                margin-left: 5% !Important;
                margin-right: 5% !Important;
            }
            
            .pdfPanel {
                height: 80%;
            }
            
            .tfnsw-arxxus .slds-button+.slds-button {
                margin-left: 1.25rem;
            }
            /* different techniques for iPad screening */
            
            @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation: portrait) {
                /* For portrait layouts only */
                .pdfPanel {
                    height: 82%;
                }
                rejectionCommentBox {
                    -webkit-appearance: none;
                    width: 100% !Important;
                    height: 20vh !Important;
                    border-radius: 10px !Important;
                    margin-left: 5% !Important;
                    margin-right: 5% !Important;
                }
                .tfnsw-arxxus .slds-modal__container {
                    margin: 0 auto;
                    width: 70%;
                    max-width: 40rem;
                    min-width: 20rem;
                }
                .pdfPreviewContainer {
                    width: 85%;
                    min-width: 50rem;
                    max-width: 60rem;
                }
                #amendmentPDF {
                    width: 70%;
                    position: relative;
                    margin-top: 1rem;
                    margin-left: 1rem;
                    -webkit-overflow-scrolling: touch;
                }
                #amendmentRejectionComment {
                    position: fixed;
                    width: 20%;
                    margin-left: 72%;
                    text-align: right;
                    float: right;
                }
                .slds-popover {
                    min-height: 14rem;
                    max-height: 30rem;
                    width: 100%;
                    margin-right: 5%;
                    margin-top: 1rem;
                    overflow-y: auto;
                    -webkit-overflow-scrolling: touch;
                }
            }
            
            @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation: landscape) {
                /* For landscape layouts only */
                .pdfPanel {
                    height: 75%;
                }
                .tfnsw-arxxus .slds-modal__container {
                    margin: 0 auto;
                    width: 70%;
                    min-width: 20rem;
                }
                #amendmentPDF {
                    width: 70%;
                    position: relative;
                    margin-top: 1rem;
                    margin-left: 2rem;
                    -webkit-overflow-scrolling: touch;
                }
                #amendmentRejectionComment {
                    position: fixed;
                    width: 20%;
                    margin-left: 72%;
                    text-align: right;
                    float: right;
                }
                .slds-popover {
                    min-height: 14rem;
                    max-height: 30rem;
                    width: 100%;
                    margin-right: 5%;
                    margin-top: 1rem;
                    overflow-y: auto;
                    -webkit-overflow-scrolling: touch;
                }
            }
            
            .rejectCommentSection {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                box-shadow: 0 -7px 5px -5px #333;
            }
            
            .bootstrap .btn-danger {
                background-color: #de1610;
                font-family: sans-serif;
                margin-right: 3% !Important;
                width: 8em;
            }
            
            .bootstrap .btn-primary {
                background-color: #2176bf;
                font-family: sans-serif;
                margin-right: 3% !Important;
            }
            
            .bootstrap .btn-success {
                font-family: sans-serif;
            }
            
            .sucessInfo {
                width: 100%;
                height: auto;
                bottom: 0px;
                top: 0px;
                left: 0;
                position: absolute;
            }
            
            .tfnsw-arxxus .slds-spinner--brand.slds-spinner:before,
            .tfnsw-arxxus .slds-spinner--brand.slds-spinner:after,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-a:before,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-b:before,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-a:after,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-b:after {
                background-color: darkred;
            }
            
            .tfnsw-arxxus .slds-spinner--brand.slds-spinner:before,
            .tfnsw-arxxus .slds-spinner--brand.slds-spinner:after,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-a:before,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-b:before,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-a:after,
            .tfnsw-arxxus .slds-spinner--brand .slds-spinner__dot-b:after {
                background-color: darkred;
            }
            
            .tfnsw-arxxus .slds-button--destructive {
                background-color: #e41f17;
                width: 8em;
            }
            
            .tfnsw-arxxus .slds-button--green {
                margin-left: 1.25rem;
                padding-left: 1rem;
                padding-right: 1rem;
                text-align: center;
                vertical-align: middle;
                background-color: #26ad15;
                color: white;
                border-width: 1px;
                border-style: solid;
                border-color: rgb(42, 189, 42);
                border-image: initial;
            }
            
            .tfnsw-arxxus .slds-button--green:hover,
            .tfnsw-arxxus .slds-button--green:focus {
                color: white;
                background-color: #377b2c;
            }
            
            .tfnsw-arxxus .slds-button {
                font-size: 0.85rem;
            }
            
            .tfnsw-arxxus .slds-button--brand {
                margin-left: 1.25rem;
            }
            
            .tfnsw-arxxus .slds-backdrop--open {
                opacity: 0.6;
            }
            
            .viewEnclousers {
                font-size: 1.0rem !Important;
                width: 50%;
                font-weight: 600 !Important;
                color: #1080e4;
                text-align: -webkit-center;
            }
            
            .iconWidth {
                max-width: 2rem !Important;
                height: 2rem !Important;
                cursor: pointer;
            }
            
            .tfnsw-arxxus .slds-spinner_container {
                background-color: rgba(0, 0, 0, 0.3);
                z-index: 10000;
            }
            /* The snackbar - position it at the bottom and in the middle of the screen */
            
            #snackbar {
                visibility: hidden;
                /* Hidden by default. Visible on click */
                min-width: 250px;
                /* Set a default minimum width */
                margin-left: -125px;
                /* Divide value of min-width by 2 */
                background-color: #333;
                /* Black background color */
                color: #fff;
                /* White text color */
                text-align: center;
                /* Centered text */
                border-radius: 2px;
                /* Rounded borders */
                padding: 16px;
                /* Padding */
                position: fixed;
                /* Sit on top of the screen */
                z-index: 100001;
                /* Add a z-index if needed */
                left: 50%;
                /* Center the snackbar */
                bottom: 30vh;
                /* 30px from the bottom */
            }
            /* Show the snackbar when clicking on a button (class added with JavaScript) */
            
            #snackbar.show {
                visibility: visible;
                /* Show the snackbar */
                /* Add animation: Take 0.5 seconds to fade in and out the snackbar. 
                  However, delay the fade out process for 2.5 seconds */
                -webkit-animation: fadein 0.5s, fadeout 0.5s 3.5s;
                animation: fadein 0.5s, fadeout 0.5s 3.5s;
            }
            /* Animations to fade the snackbar in and out */
            
            @-webkit-keyframes fadein {
                from {
                    bottom: 0;
                    opacity: 0;
                }
                to {
                    bottom: 30vh;
                    opacity: 1;
                }
            }
            
            @keyframes fadein {
                from {
                    bottom: 0;
                    opacity: 0;
                }
                to {
                    bottom: 30vh;
                    opacity: 1;
                }
            }
            
            @-webkit-keyframes fadeout {
                from {
                    bottom: 30vh;
                    opacity: 1;
                }
                to {
                    bottom: 0;
                    opacity: 0;
                }
            }
            
            @keyframes fadeout {
                from {
                    bottom: 30vh;
                    opacity: 1;
                }
                to {
                    bottom: 0;
                    opacity: 0;
                }
            }
            
            .disabledbutton {
                pointer-events: none;
                opacity: 0.4;
            }
            
            #precedentFooter {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            #incomingFooter {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            #previousCorroFooter {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            #adviceDocumentSectionFooter {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            #amendmentFooter {
                background: white;
                position: fixed;
                width: 100%;
                height: auto;
                bottom: 0px;
                display: block;
                padding-top: 0.3rem;
                padding-bottom: 0.3rem;
            }
            
            #amendmentRejectionComment {
                position: fixed;
                width: 20%;
                margin-left: 72%;
                text-align: right;
                float: right;
            }
            
            #amendmentTab {
                padding-top: 0;
            }
            
            .label {
                min-width: 7rem;
                text-align: right;
                max-width: 10rem;
            }
            
            .value {
                margin-left: 0.5rem;
            }
            
            div[id^=precedentResponseView] {
                width: 85%;
                margin: 0 auto;
                position: relative;
            }
            
            div[id^=incomingDocumentView] {
                width: 85%;
                margin: 0 auto;
                position: relative;
            }
            
            div[id^=previousCorroDocumentView] {
                width: 85%;
                margin: 0 auto;
                position: relative;
            }
            
            div[id^=actionPlanDocumentView] {
                width: 85%;
                margin: 0 auto;
                position: relative;
            }
            
            .goPreviousIcon,
            .goNextIcon {
                cursor: pointer;
                max-width: 2rem !Important;
                height: 2rem !Important;
            }
            
            .tfnsw-arxxus .slds-icon--small {
                width: 1.2rem;
                height: 1.2rem;
            }
            
            .tfnsw-arxxus .slds-radio .slds-radio--faux {
                border: 2px solid rgba(0, 38, 100, 1);
            }
            
            div.figure {
                padding: 0.5em;
            }
            
            div.figure p {
                text-align: center;
                font-style: italic;
                font-size: smaller;
                text-indent: 0;
            }
            
            div[id^=incomingLoading] {
                display: block;
                height:3rem;
            }

            #incomingLoading {
                display: block;
                height:3rem;
            }
            
            #adviceLoading {
                display: block;
                height:3rem;
            }
            
            #precedentsLoading {
                display: block;
                height:3rem;
            }
            
            #previouscorroLoading {
                display: block;
                height:3rem;
            }

            #amendmentLoading{
                display: block;
                height:3rem;
            }
                        
            .contentLoading {
                width: 3rem;
                height: 4rem;
                text-align: center;
                margin: 0 auto;
                height: 100%;
                vertical-align: middle;
                top: 50%;
            }

            .loadingMessage{
                text-align: center;
                display: block;
            }

            div[id^=incomingLoadingMessage] {
                display: block;
                width: 100%;
            }

            div[id^=adviceLoadingMessage] {
                display: block;
                width: 100%;
            }
            div[id^=precedentLoadingMessage] {
                display: block;
                width: 100%;
            }

            div[id^=previousCorroLoadingMessage] {
                display: block;
                width: 100%;
            }

            div[id^=amendmentLoadingMessage] {
                display: block;
                width: 100%;
            }

            div[id^=incomingFailToLoad] {
                display: block;
                width: 100%;
                text-align: center;
            }

            div[id^=adviceFailToLoad] {
                display: block;
                width: 100%;
                text-align: center;
            }

            div[id^=precedentFailToLoad] {
                display: block;
                width: 100%;
                text-align: center;
            }

            div[id^=corroFailToLoad] {
                display: block;
                width: 100%;
                text-align: center;
            }

            div[id^=responseErrorBlock]{
                display: block;
                width: 100%;
                text-align: center;
            }

            div[id^=amendmentErrorBlock]{
                display: block;
                width: 100%;
                text-align: center;
            }

            #charCount{
                width: 40%;
                margin-right: 5%;
                text-align: right;
            }

            #chars{
                display: inline;
                color: darkred;
            }

        </style>

        <script type="text/javascript">

            var $j = jQuery.noConflict();
            sforce.connection.sessionId = "{!$Api.Session_ID}";
            var mycontent = '';
            var BASE64_MARKER = ';base64,';
            var numberOfCasesInQueue = {!totalCaseCountInQueue};
            sessionStorage.setItem('counterForNextApproval', {!caseIndexNumber});
            sessionStorage.setItem('counterForDeskTopEditing', {!caseIndexNumber});
            var headerSectionToEnable = [];
            var sortByColumnIndex = '{!$CurrentPage.parameters.sortColIndex}';
            var sortOrderIndex = '{!$CurrentPage.parameters.sortColOrder}';
            var filterStr = '{!$CurrentPage.parameters.searchBy}';

            // variables used to identify the skip to next/rejection/approval action
            var setEnclosuresPositionFlag = false;
            var setIncomingPositionFlag = false;
            var setAdvicePositionFlag = false;
            var setPrecedentsPositionFlag = false;
            var setPreviousCorroPositionFlag = false;
            var setAmendmentPositionFlag = false;

            $j(document).ready(function() {

                pageLoadingController.hideLoading();
                MinisterApprovalProcessModule.__willShowHideHeaderSection();
                MinisterApprovalProcessModule.__willShowCommunicationPreference();
                MinisterApprovalProcessModule.__willShowUserDetail();

                if (numberOfCasesInQueue == 1) {
                    $j('#skipToNext').addClass('disabledbutton');
                } else {
                    $j('#skipToNext').removeClass('disabledbutton');
                }

                // used to calculate the remaining number of charaters for rejection comment
                var maxLength = 4000;
                $j('textarea').keyup(function() {
                    var length = $j(this).val().length;
                    var length = maxLength-length;
                    $j('#chars').text(length);
                       
                });

            });

            // MinisterApproval Process Module
            var MinisterApprovalProcessModule = (function() {

                var userName = '';
                var imageUrl = '';
                var attachmentId = '';
                var caseId = '';
                var documentId = '';
                var documentName = '';
                var indexCount = 0;
                var precedentMap = [];
                var incomingMap = [];
                var previousCorroMap = [];
                var adviceMap = [];
                var responseMap = [];
                var amendmentMap = [];
                var loggedInUserRole = '';                
                var communicationPrefernce = '';
                var createAmendment = false;
                var rejectedWithComment = '';
                var isMarkedForDesktopEditing = false;
                var removeCasesAfterDesktopMarking = [];
                var attachmentResultSet = [];
                var attachmentIdWithCaseNumber = '';
                var incomingMetaData = [];
                var adviceMetaData = [];
                var precedentMetaData = [];
                var previousCorroMetaData = [];

                var __willShowHideHeaderSection = function() {

                    pageLoadingController.showLoading();
                    willFetchUserRoleForApproval();
                    __willGetUserRoleForAmendmentCreation();

                    headerSectionToEnable = [];
                    headerSectionToEnable.push('response_menu');

                    var elemntWidth = 100 / headerSectionToEnable.length;
                    $j('.menuItem').width(elemntWidth + '%');

                };

                // fetch case information i.e. CaseNumber,Subject,CreatedDate and DueDate
                var willFetchCaseInformation = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getCaseInformation(
                            parseInt(sessionStorage.getItem('counterForNextApproval')), sortByColumnIndex, sortOrderIndex, filterStr, isMarkedForDesktopEditing, removeCasesAfterDesktopMarking,
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };


                var __willShowCaseInformation = function() {
                    pageLoadingController.showLoading();
                    willFetchCaseInformation().then(function(result) {

                        // Blank incoming section as new case is coming
                        $j('#incomingErrorMessage').nextAll().remove();
                        $j("#incomingFooter").html('');
                        $j('#incomingErrorMessage').css('display', 'none');
                        $j('#incomingLoading').css('display', 'block');
                        $j('#incomingLoadingMessage').css('display', 'block');

                        // Blank precedents section as new case is coming    
                        $j('#precedentErrorMessage').css('display', 'none');
                        $j("#precedentFooter").html('');
                        $j('#precedentErrorMessage').nextAll().remove();
                        $j('#precedentsLoading').css('display', 'block');
                        $j('#precedentLoadingMessage').css('display', 'block');

                        // Blank previous corro section as new case is coming
                        $j('#corroErrorMessage').css('display', 'none');
                        $j("#previousCorroFooter").html('');
                        $j('#corroErrorMessage').nextAll().remove();
                        $j('#previouscorroLoading').css('display', 'block');
                        $j('#previousCorroLoadingMessage').css('display', 'block');

                        // Blank advice section as new case is coming
                        $j('#adviceErrorMessage').css('display', 'none');
                        $j("#adviceDocumentSectionFooter").html('');
                        $j('#adviceErrorMessage').nextAll().remove();
                        $j('#adviceLoading').css('display', 'block');
                        $j('#adviceLoadingMessage').css('display', 'block');

                        $j('.caseTitle').html('');
                        $j('.headerValues').html('');
                        $j('#currentCaseNumber').html(result[0].CaseNumber);

                        if (result[0].hasOwnProperty('Subject'))
                            $j('.caseTitle').html(result[0].Subject);
                        else
                            $j('.caseTitle').html('(No Subject)');

                        if (result[0].Due_date__c != '' && result[0].Due_date__c != null)
                            $j('.headerValues').html(moment(result[0].CreatedDate).format('DD/MM/YYYY') +
                                '   ●   ' + result[0].CaseNumber +
                                '   ●   ' + moment(result[0].Due_date__c).format('DD/MM/YYYY'));
                        else
                            $j('.headerValues').html(moment(result[0].CreatedDate).format('DD/MM/YYYY') +
                                '   ●   ' + result[0].CaseNumber);

                        __willShowCommunicationPreference();

                        pageLoadingController.hideLoading();
                    }).then(function() {
                        __willShowEnclosuresList();
                        __willShowAmendment();
                    }).catch(function() {
                        //pageLoadingController.hideLoading();
                    })
                };

                //fetch response body of response document to render as pdf  
                var willFetchResponseBody = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getResponseDocumentBody(
                            parseInt(sessionStorage.getItem('counterForNextApproval')), sortByColumnIndex, sortOrderIndex, filterStr, isMarkedForDesktopEditing, removeCasesAfterDesktopMarking,
                            function(result, event) {
                                responseMap = [];
                                if (result.hasOwnProperty('data')){
                                    responseMap.push(result);
                                    resolve(result);
                                }
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // render PDF
                var __willRenderPDF = function() {

                    pageLoadingController.showLoading();

                    willFetchResponseBody().then(function(result) {
                        setTimeout(function(){
                            MinisterApprovalProcessModule.__willShowIncomingList();
                        },500);
                        
                        PDFRenderModule.renderPDFWithResponseBody(result.data, 'responsePDF',$j('#currentCaseNumber').text());

                        $j('#rejectIcon').removeClass('disabledbutton');
                        $j('#dektopEditingIcon').removeClass('disabledbutton');
                        $j('#approvalIcon').removeClass('disabledbutton');
                        $j('#responseErrorMessage').css('display', 'none');

                        if (result.desktopEditing === 'true' || loggedInUserRole == 'Signatory')
                            $j('#dektopEditingIcon').addClass("disabledbutton");
                        else
                            $j('#dektopEditingIcon').removeClass("disabledbutton");

                    }).catch(function() {

                        MinisterApprovalProcessModule.__willShowIncomingList();
                        pageLoadingController.hideLoading();

                        $j('#responsePDF').html('');
                        $j('#rejectIcon').addClass('disabledbutton');
                        $j('#dektopEditingIcon').addClass('disabledbutton');
                        $j('#approvalIcon').addClass('disabledbutton');
                        $j('#responseErrorMessage').css('display', 'block');

                    })
                };


                var willFetchUserRoleForRejection = function(argument) {

                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getUserRoleToCreateAmendment(
                            function(result, event) {
                                if (result == true)
                                    resolve(result);
                                else
                                    reject(result);
                            }, {
                                escape: false
                            });
                    })
                };

                var __willGetUserRoleForAmendmentCreation = function() {
                    willFetchUserRoleForRejection().then(function() {
                        createAmendment = true;
                    }).catch(function() {
                        console.log('User not authorized to create amendment');
                    })
                };

                // check if user click on 'Send Instructions' without adding anything in textarea  
                var willValidateRejectionCommentInput = function() {
                    return new Promise(function(resolve, reject) {
                        var instructionText = $j('textarea#rejectionComment').val();
                        if (instructionText != '')
                            resolve(instructionText);
                        else
                            reject();
                    })
                };

                // fetch instruction sent to
                var willFetchInstructionsSentTo = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getUserOrQueueToSendInstructions(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // show instruction sent to
                var __willShowInstructionsSentTo = function() {
                    willFetchInstructionsSentTo().then(function(result) {
                        $j('#sentTo').html(' ' + result);
                    }).catch(function() {
                        console.log('User/Queue not specified to send the Instructions.');
                    })
                };

                // will save rejection comment
                var willSaveRejectionComment = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        var instructionText = $j('textarea#rejectionComment').val();
                        rejectedWithComment = instructionText;
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getUpdateCaseWithRejectionComment(
                            instructionText, createAmendment, $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject(result);
                            }, {
                                escape: false
                            });
                    })
                };

                // Reject response by DLO/PA or Signatory
                var willRejectResponseByApprover = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.submitApprovalRequest(
                           loggedInUserRole, 'Reject', '', rejectedWithComment, $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // get approver role, update case with rejection comment, Reject correspondence by Approver in Salesforce
                var __willShowAfterSavingRejectionComment = function() {
                    willFetchUserRoleForApproval().then(function() {
                        willValidateRejectionCommentInput().then(function() {
                            willSaveRejectionComment().then(function() {
                                willRejectResponseByApprover().then(function(result) {
                                    $j('textarea#rejectionComment').val('');
                                    $j('.rejectCommentSection').css('display', 'none');
                                    $j('.footer').show();
                                    $j('#snackbar').html('Correspondence rejected with rejection comment.');
                                    pageLoadingController.hideLoading();
                                    snackBarController.showSnackBar();
                                    setIncomingPositionFlag = setAdvicePositionFlag = setPrecedentsPositionFlag = setEnclosuresPositionFlag =setPreviousCorroPositionFlag = setAmendmentPositionFlag = false;
                                    setTimeout(__willShowNextResponseForMOView(true), 3000);
                                   
                                }).catch(function() {
                                    
                                    $j('#snackbar').html('Something went wrong. Please contact System Administrator');
                                    snackBarController.showSnackBar();
                                    pageLoadingController.hideLoading();
                                })
                            }).catch(function() {
                                
                                $j('#snackbar').html('Error in updating case.');
                                snackBarController.showSnackBar();
                                pageLoadingController.hideLoading();
                                $j('.rejectCommentSection').css('display', 'block');
                            })
                        }).catch(function() {
                            
                            $j('#snackbar').html('Please specify rejection comment.');
                            pageLoadingController.hideLoading();
                            snackBarController.showSnackBar();
                        })
                    }).catch(function() {
                        
                        pageLoadingController.hideLoading();
                    })
                };

                // mark for deskTop editing
                var willMarkForDeskTopEditing = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.caseUpdateWithDesktopEditing(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // show after marked for desktop editing
                var __willShowAfterDeskTopEditing = function() {

                    if ({!$User.UIThemeDisplayed == 'Theme3'}) {
                        __willFetchThunderheadURL().then(function(result) {
                            $j('#snackbar').html('You will be redirected to next case present in approval queue if any.');
                            snackBarController.showSnackBar();
                            isMarkedForDesktopEditing = true;
                            setEnclosuresPositionFlag = setIncomingPositionFlag = setAdvicePositionFlag = setPrecedentsPositionFlag = setPreviousCorroPositionFlag = setAmendmentPositionFlag = false;
                            setTimeout(function() {
                                __willShowNextResponseForMOView(true);
                            }, 2000);
                            setTimeout(function() {
                                sforce.console.openPrimaryTab(null, result, true, '', null, '');
                            }, 2000);
                            removeCasesAfterDesktopMarking.push($j('#currentCaseNumber').text());
                        }).catch(function() {
                            console.log('Error in opening draft.');
                        })
                    } else {
                        willMarkForDeskTopEditing().then(function(result) {
                            $j('#dektopEditingIcon').addClass("disabledbutton");
                            $j('#snackbar').html('Marked for desktop editing.');
                            pageLoadingController.hideLoading();
                            snackBarController.showSnackBar();
                        }).catch(function() {
                            $j('#dektopEditingIcon').removeClass("disabledbutton");
                            console.log('Error in marked for desktop editing');
                            pageLoadingController.hideLoading();
                            $j('.footer').show();
                        })
                    }
                };

                var __willFetchThunderheadURL = function() {
                    return new Promise(function(resolve, reject) {
                        MinisterApprovalViewController.getThunderHeadDraftURL(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result.length != 0) {
                                    resolve(result);
                                } else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // fetch signature URL
                var willFetchUserDetail = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getUserDetail(
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // show after fetching signature URL
                var __willShowUserDetail = function() {
                    willFetchUserDetail().then(function(result) {
                        imageUrl = result.Signature_Location__c;
                        userName = result.Name;
                    }).catch(function() {
                        console.log('Signature url not specified.');
                    })
                };

                var willFetchUserRoleForApproval = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.validateUserForApproval(
                            function(result, event) {
                                if (result != '') {
                                    loggedInUserRole = result;
                                    resolve(result);
                                } else {
                                    reject();
                                }
                            }, {
                                escape: false
                            }
                        );
                    })
                };

                var willApproveResponse = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {

                        var getCommnuicationPreference = '';
                        if ($j('input[name=options]:checked').length != 0) {
                            getCommnuicationPreference = $j('input[name=options]:checked')[0].id;
                        }
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.submitApprovalRequest(
                            loggedInUserRole, 'Approve', getCommnuicationPreference, '', $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            }
                        );
                    })
                };


                var __willStartApprovalProcess = function() {
                    pageLoadingController.showLoading();
                    willFetchUserRoleForApproval().then(function(result) {
                        if (result == 'Signatory') {
                            willUpdateCaseWithSignatureURL().then(function(result) {
                                if (userName != '') {
                                    $j('.loogedInUserName').html(userName);
                                    pageLoadingController.hideLoading();
                                    $j('.slds-backdrop--open').css('display', 'block');
                                    $j('.approvalInfoModal').css('display', 'block');
                                }

                                if (imageUrl != '' && imageUrl != null) {
                                    $j('.ministerSignature').attr("src", imageUrl);
                                    $j('.ministerSignature').css("display", 'inline');
                                } else {
                                    $j('#signatureShow').css('display', 'block');
                                    $j('#noSignature').css('display', 'block');
                                    $j('#previewWithSignature').css('disabled', 'true');
                                    $j('#nextForApproval').css('disabled', 'true');
                                }

                                if ($j('input[name=options]:disabled').length > 0 && (communicationPrefernce == 'Email' ||  communicationPrefernce == undefined || communicationPrefernce == null ||
                                    communicationPrefernce == 'Letter' )) {
                                    $j('#Email').prop('checked', false);
                                    $j('#Letter').prop('checked', true);
                                    $j('#snackbar').html('No email provided for contact.');
                                    snackBarController.showSnackBar();
                                }else if (communicationPrefernce == 'Letter') {
                                    $j('#Letter').prop('checked', true);
                                }else if (communicationPrefernce == 'Email' && $j('input[name=options]:disabled').length <= 0 ) {
                                    $j('#Email').prop('checked', true);
                                }

                            })
                        } else {

                            willApproveResponse().then(function(result) {
                                if (result == 'Approved') {
                                    pageLoadingController.hideLoading();
                                    $j('#snackbar').html('Approved and sent to signatory for further approval.');
                                    snackBarController.showSnackBar();
                                    setEnclosuresPositionFlag = setIncomingPositionFlag = setAdvicePositionFlag = setPrecedentsPositionFlag = setPreviousCorroPositionFlag = setAmendmentPositionFlag = false;
                                    __willShowNextResponseForMOView(true);
                                }
                            }).catch(function() {
                                $j('#snackbar').html('Error in approval processing. Please contact System Administrator.');
                            })

                        }
                    }).catch(function() {
                        console.log('Error in starting approval process');
                    })
                };

                var willUpdateCaseWithSignatureURL = function() {
                    return new Promise(function(resolve, reject) {
                        MinisterApprovalViewController.updateCaseSingnatureURL(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // fetch response body for preview with signature
                var willFetchResponseBodyForPreview = function() {
                    pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        MinisterApprovalViewController.getDocumentPreviewWithSignature(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // show preview with signature
                var __willShowResponseBodyForPreview = function() {
                    willFetchResponseBodyForPreview().then(function(result) {
                        attachmentId = result.Id;
                        $j('.documentName').html(result.name);
                        PDFRenderModule.renderPDFWithResponseBody(result.data, 'pdfPreviewMode',$j('#currentCaseNumber').text());
                        $j('#pdfPreviewMode').css('display', 'block');
                        $j('.pdfPreviewModal').css('display', 'block');
                        pageLoadingController.hideLoading();
                    }).catch(function() {
                        
                        pageLoadingController.hideLoading();
                        $j('#snackbar').html('Error in generating preview with signature.');
                        $j('.approvalInfoModal').css('display', 'none');
                        $j('.slds-backdrop--open').css('display', 'none');
                        snackBarController.showSnackBar();
                    })
                };

                // will get navigate to home page if there are no any case in approval queue
                var willFetchApprovalQueueHomePageURL = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.approvalQueueHomePage(
                            function(result, event) {
                                if (result != null)
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // will navigate to home page if there are no any case in approval queue
                var willShowApprovalQueueHomePage = function() {
                    willFetchApprovalQueueHomePageURL().then(function(result) {
                        window.location = result;
                    }).catch(function() {
                        console.log('Error in getting approval queue home page url.');
                    })
                };

                // fetch ecnclousers list
                var willFetchEnclosuresList = function() {

                    return new Promise(function(resolve, reject) {
                        var caseNum = '{!CaseNumber}';
                        if($j('#currentCaseNumber').text() != '' && $j('#currentCaseNumber').text() != null){
                            caseNum = $j('#currentCaseNumber').text();
                        }                        
                        MinisterApprovalViewController.getEnclosuresList(
                            caseNum,
                            function(result, event) {
                                if(result.length > 0){
                                    resolve(result);
                                }else{
                                    reject();
                                }

                            }, {
                                escape: false
                            });
                    })
                };

                // show ecnclosures list view
                var __willShowEnclosuresList = function() {

                    willFetchEnclosuresList().then(function(result) {

                        $j('#enclosureTab').html('');
                        $j('.enclosures_menu').css('display', 'block');

                        headerSectionToEnable.push('enclosures_menu');
                        headerSectionToEnable.push('incoming_menu');
                        headerSectionToEnable.push('advice_menu');
                        headerSectionToEnable.push('precedents_menu');
                        headerSectionToEnable.push('previous_coro');

                        var tmpl = $j.templates({
                            markup: "#enclosureView",
                            allowCode: true
                        });
                        var dataHtml = tmpl.render(result, helperModule);
                        $j("#enclosureTab").html(dataHtml);

                    }).catch(function() {

                        $j('.enclosures_menu').css('display', 'none');

                        headerSectionToEnable.push('incoming_menu');
                        headerSectionToEnable.push('advice_menu');
                        headerSectionToEnable.push('precedents_menu');
                        headerSectionToEnable.push('previous_coro');

                    })
                };

                // complete approval with Signed PDF and Email sent
                var __willApproveAndGenerateSignedPDF = function() {
                    
                    if ($j('input[name=options]:checked').length == 0) {
                        $j('#snackbar').html('Please select communication preference');
                        snackBarController.showSnackBar();
                        $j('.approvalInfoModal').css('display', 'block');
                        $j('.slds-backdrop--open').css('display', 'block');

                    } else {
                        willApproveResponse().then(function(result) {
                            pageLoadingController.hideLoading();
                            $j('#snackbar').html('The response approval has been successfully submitted for processing.');
                            snackBarController.showSnackBar();
                            setEnclosuresPositionFlag = setIncomingPositionFlag = setAdvicePositionFlag = setPrecedentsPositionFlag = setPreviousCorroPositionFlag = setAmendmentPositionFlag = false;
                            __willShowNextResponseForMOView(true);
                        }).catch(function() {
                            console.log('Error in Approval Process');
                        })
                    }
                };

                // fetch communication prefernce
                var willGetCommunicationPrefernce = function() {
                    //pageLoadingController.showLoading();
                    return new Promise(function(resolve, reject) {
                        MinisterApprovalViewController.getCommunicationPreferences(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                if (result != '')
                                    resolve(result);
                                else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // show communication prefernce
                var __willShowCommunicationPreference = function() {
                    
                    willGetCommunicationPrefernce().then(function(result) {
                        
                        $j('#Email,#Letter').prop('Checked',false);
                        $j('#Email,#Letter').attr('disabled',false);
                        
                        if (result.hasOwnProperty('Contact_Email__c') === false) {
                            if(result.hasOwnProperty('Minister_Communication_Preference__c') === true){
                            communicationPrefernce = result.Minister_Communication_Preference__c;
                            }
                            $j('#Email').prop('disabled', true);
                        } else {
                            $j('#Email').prop('disabled', false);
                            if(result.hasOwnProperty('Minister_Communication_Preference__c') === true){
                            communicationPrefernce = result.Minister_Communication_Preference__c;
                            }
                            if(communicationPrefernce != undefined && communicationPrefernce != null)
                            $j('#'+communicationPrefernce).prop('checked', true);
                            
                        }
                    }).catch(function() {
                        console.log('Communication prefernce not specified.' );
                    })
                };

                // will show next response for approval process
                var __willShowNextResponseForMOView = function(checkRejectionOrApproval) {
                    try {
                        // set all tabs flag to true for first document scroll    
                        setEnclosuresPositionFlag = setIncomingPositionFlag = setAdvicePositionFlag =   setPrecedentsPositionFlag = setPreviousCorroPositionFlag = setAmendmentPositionFlag = true;

                        $j('#responsePDF').html('');
                        $j('#responseLoading').css('display', 'block');
                        $j('#responseLoadingMessage').css('display', 'block');

                        $j('#responseErrorMessage').css('display', 'none');


                        var counterForNextApproval = parseInt(sessionStorage.getItem('counterForNextApproval'));
                        if (counterForNextApproval >= numberOfCasesInQueue - 1) {

                            sessionStorage.setItem('counterForNextApproval', -1);
                            counterForNextApproval = parseInt(sessionStorage.getItem('counterForNextApproval'));

                        }

                        if (checkRejectionOrApproval === true) {

                            numberOfCasesInQueue = numberOfCasesInQueue - 1;

                            if (counterForNextApproval < numberOfCasesInQueue && counterForNextApproval >= -1 && numberOfCasesInQueue != 0) {
                                if (numberOfCasesInQueue == 1)
                                    counterForNextApproval = 0;

                                if (counterForNextApproval == -1)
                                    counterForNextApproval = 0;

                                sessionStorage.setItem('counterForNextApproval', counterForNextApproval);

                                __willShowCaseInformation();
                                __willRenderPDF();
                                __willShowHideHeaderSection();
                                
                            }

                        } else if (checkRejectionOrApproval === false) {

                            if (counterForNextApproval < numberOfCasesInQueue && counterForNextApproval >= -1) {

                                counterForNextApproval++;
                                sessionStorage.setItem('counterForNextApproval', counterForNextApproval);

                                __willShowCaseInformation();
                                __willRenderPDF();
                                __willShowHideHeaderSection();
                                
                            }

                        }

                        if (numberOfCasesInQueue == 0) {
                            setTimeout(function() {
                                willShowApprovalQueueHomePage();
                            }, 2000);
                        } else if (numberOfCasesInQueue == 1) {
                            $j('#skipToNext').addClass('disabledbutton');
                        } else {

                            $j('#rejectIcon').removeClass('disabledbutton');
                            $j('#dektopEditingIcon').removeClass('disabledbutton');
                            $j('#approvalIcon').removeClass('disabledbutton');
                            $j('#skipToNext').removeClass('disabledbutton');

                        }

                    } catch (error) {
                        console.log('Error in showing next response :: ' + error);
                    }
                };

                // will fetch all precedents related to this particular case
                var willFetchAllPrecedents = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getPrecedentsDetail(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                precedentMetaData = '';
                                precedentMap = [];
                                if (Object.keys(result).length != 0) {

                                    for (var i in result) { 
                                        if (result.hasOwnProperty(i)) { 
                                            precedentMap.push(result[i]);
                                        }
                                    }                                    
                                    precedentMetaData = result;
                                    var currentCaseNumber = $j('#currentCaseNumber').text();
                                    if (parseInt(currentCaseNumber) === parseInt(precedentMap[0].currentCaseNumber))
                                        resolve(result);
                                } else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                // will show all precedents, use navigationSide --> true for Next and false for Previous
                var __willShowPrecedents = function() {

                    willFetchAllPrecedents().then(function(result) {

                        $j('#precedentErrorMessage').css('display', 'none');
                        $j("#precedentFooter").html('');
                        $j('#precedentErrorMessage').nextAll().remove();

                        $j('#precedentsLoading').css('display', 'none');
                        $j('#precedentLoadingMessage').css('display', 'none');

                        var showCurrentDocNumber = 0;
                        // create div for each attachment
                        for(var i =0 ; i <precedentMap.length; i++) {
                           
                            createElement("precedentTab",i);
                        }

                        // set default number of incoming
                        sessionStorage.setItem('counterForPrecedent', 0);

                        var tmplFooter = $j.templates({
                            markup: "#precendentsFooterTemplate",
                            allowCode: true
                        });
                        
                        var dataHtmlFooter = tmplFooter.render(result[Object.keys(result)[0]], helperModule);
                        $j("#precedentFooter").html(dataHtmlFooter);

                        
                        $j('#showPreviousPrecedent').addClass('disabledbutton');
                        if(showCurrentDocNumber == precedentMap[showCurrentDocNumber].totalCount -1) {
                           $j('#showNextPrecedent').addClass('disabledbutton'); 
                        } 

                        showPrecedentPDF(result);
                    }).catch(function() {

                        $j('#precedentsLoading').css('display', 'none');
                        $j('#precedentLoadingMessage').css('display', 'none');

                        MinisterApprovalProcessModule.__willShowPreviousCorroList();

                        $j('#precedentErrorMessage').nextAll().remove();
                        $j("#precedentFooter").html('');
                        $j('#precedentErrorMessage').css('display', 'block');

                    })
                };

                var showPrecedentPDF = function(result){
                    
                    //attachmentIdWithCaseNumber = result;
                    var currentPointer;
                    var ids = [];
                    var resultSet = Object.keys(result);
                    for (var a=0; a<resultSet.length; a++) {
                        ids.push(resultSet[a]);
                    }   
                                                                 
                    //soql query to fetch attachment information categorised as 'Incoming'
                    var query ;

                    for(var i = 0; i <= ids.length; i++){
                        if(i < ids.length){
                            query = "Select Id,Body FROM Attachment WHERE Id =\'" + ids[i] + "\' ";
                            
                            sforce.connection.query(query, {
                                onSuccess : success,
                                onFailure : failure,
                                timeout: 120000,
                                source : ids[i]
                            });
                        }else{
                            setTimeout(function(){
                                MinisterApprovalProcessModule.__willShowPreviousCorroList();
                            },500);
                            
                        }   
                    }
                        
                    // callback method used for salesforce ajaxtoolkit methods
                    function success(result) {
                      
                        var records = result.getArray("records");
                        if(records[0] != undefined && records[0].hasOwnProperty('Id') && precedentMetaData.hasOwnProperty(records[0].Id)){
                            precedentMetaData[records[0].Id]['body'] = 'data:application/pdf;base64,'+records[0].Body;
                      
                            var arrayIndex = getObjectKeyIndex(precedentMetaData,records[0].Id);
                            createAndShowPDF(precedentMetaData[records[0].Id],arrayIndex);
                        }
                    }

                    // callback method 
                    function failure(error,source) {
                        //console.log("An error has occurred ::" + error );
                        var errorIndex = getObjectKeyIndex(precedentMetaData,source);
                        if( errorIndex != null && (error == 'Remote invocation timed out' || error.includes('Remote invocation failed'))){
                            //show time out message
                            $j('#precedentResponseView-'+errorIndex).html('');
                            var container = document.getElementById('precedentResponseView-'+errorIndex);
                            var div = document.createElement("div");
                            div.setAttribute("id","precedentFailToLoad-"+errorIndex);
                            div.setAttribute("style","display:block"); 
                            container.appendChild(div);

                            $j('#precedentFailToLoad-'+errorIndex).html('Unfortunately, this document was unable to load.' +'<br>' + 'Please press “next” or “previous” to open another document.');

                        }
                    }  

                    // create PDF and show default(First) PDF only initialy
                    function createAndShowPDF(attachmentData,index){
            
                        if(attachmentData.body != "" && attachmentData.body != undefined && attachmentData.body != null){
                            PDFRenderModule.renderPDFWithResponseBody(attachmentData.body, 'precedentResponseView-' + index,$j('#currentCaseNumber').text());
                        }

                        var currentPrecedentPointer = helperModule.currentPrecdentNumber();
                        if(currentPrecedentPointer === index){
                            $j('#precedentLoading-'+index).css('display', 'none');
                            $j('#precedentLoadingMessage-'+index).css('display', 'none');
                            $j('#precedentResponseView-'+index).css('display','block');
                            
                        }else{
                            $j('#precedentResponseView-'+index).css('display','none'); 
                        }
                    }
                }

                // will show next precedent which is in cache and fetch next to put in cache
                var __willShowNextPrecedent = function() {
                    
                    var setId = $j("[id^=precedentResponseView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    var index = helperModule.currentPrecdentNumber();
                    
                    var nextPrecedent = index + 1;
                    sessionStorage.setItem('counterForPrecedent', nextPrecedent);
                    if(precedentMap[nextPrecedent] != "" && precedentMap[nextPrecedent] != null && precedentMap[nextPrecedent] != undefined){
                        
                        var tmplFooter = $j.templates({
                            markup: "#precendentsFooterTemplate",
                            allowCode: true
                        });

                        var dataHtmlFooter = tmplFooter.render(precedentMap[nextPrecedent], helperModule);
                        $j("#precedentFooter").html(dataHtmlFooter);

                        var counter = nextPrecedent + 1;
                        if(nextPrecedent >= precedentMap[nextPrecedent].totalCount -1 ){
                            $j('#showNextPrecedent').addClass('disabledbutton'); 
                        }

                    }

                    if($j('#precedentResponseView-' + nextPrecedent).html() == ''){
                        PDFRenderModule.renderPDFWithResponseBody(precedentMap[nextPrecedent].body,'precedentResponseView-'+nextPrecedent,$j('#currentCaseNumber').text());
                    }

                    $j('#precedentResponseView-' + nextPrecedent).scrollTop();
                    $j('#precedentResponseView-' + nextPrecedent).css('display', 'block');    

                    // Blank page pdf solution
                    if($j('#precedentResponseView-' + nextPrecedent).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(precedentMap[nextPrecedent].body,'precedentResponseView-'+nextPrecedent,$j('#currentCaseNumber').text());
                    }else if( $j('#precedentResponseView-' + nextPrecedent).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#precedentResponseView-' + nextPrecedent).children();
                        if(!(childElement[0].id).includes('precedentLoading') 
                            && PDFRenderModule.isCanvasTransparent('precedentResponseView-' + nextPrecedent) == true)
                            PDFRenderModule.renderPDFWithResponseBody(precedentMap[nextPrecedent].body,'precedentResponseView-'+nextPrecedent,$j('#currentCaseNumber').text());
                    }

                };

                // will show prevoius precdent in precedent list
                var __willShowPreviousPrecedent = function(event) {

                    var previousItem = helperModule.currentPrecdentNumber() - 1;
                    
                    var setId = $j("[id^=precedentResponseView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    $j('#precedentResponseView-' + previousItem).scrollTop();
                    $j('#precedentResponseView-' + previousItem).css('display', 'block');

                    // Blank page pdf solution
                    if($j('#precedentResponseView-' + previousItem).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(precedentMap[previousItem].body,'precedentResponseView-'+previousItem,$j('#currentCaseNumber').text());
                    }else if( $j('#precedentResponseView-' + previousItem).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#precedentResponseView-' + previousItem).children();
                        if(!(childElement[0].id).includes('precedentLoading') 
                            && PDFRenderModule.isCanvasTransparent('precedentResponseView-' + previousItem) == true)
                            PDFRenderModule.renderPDFWithResponseBody(precedentMap[previousItem].body,'precedentResponseView-'+previousItem,$j('#currentCaseNumber').text());
                    }

                    sessionStorage.setItem('counterForPrecedent', previousItem);

                    var tmplFooter = $j.templates({
                        markup: "#precendentsFooterTemplate",
                        allowCode: true
                    });
                    var dataHtmlFooter = tmplFooter.render(precedentMap[previousItem], helperModule);
                    $j("#precedentFooter").html(dataHtmlFooter);

                    if (helperModule.currentPrecdentNumber() <= 0) {
                        $j('#showPreviousPrecedent').addClass('disabledbutton');
                        sessionStorage.setItem('counterForPrecedent', 0);
                    }
                };

                // will fetch all incoming documents
                var willFetchAllIncoming = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getIncomingAttachments(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                incomingMap = [];
                                incomingMetaData = '';  
                                if (Object.keys(result).length != 0) { 
                                    incomingMetaData = result; 
                                    for (var i in result) { 
                                        if (result.hasOwnProperty(i)) { 
                                            incomingMap.push(result[i]);
                                        }
                                    }
                                    var currentCaseNumber = $j('#currentCaseNumber').text();
                                    if (parseInt(currentCaseNumber) === parseInt(incomingMap[0].caseNumber)) 
                                        resolve(result);
                                }else{
                                    reject(result);
                                }
                                                                                            
                            }, { escape: false });
                    });          
                };
                
                var showIncomingPDF = function(result){

                    var currentPointer;
                    var ids = [];
                    var resultSet = Object.keys(result);
                    for (var a=0; a<resultSet.length; a++) {
                        ids.push(resultSet[a]);
                    }   
                                                                     
                    //soql query to fetch attachment information categorised as 'Incoming'
                    var query ;

                    for(var i = 0; i <= ids.length; i++){
                        if(i < ids.length){
                            query = "Select Id,Body FROM Attachment WHERE Id =\'" + ids[i] + "\' ORDER BY CreatedDate ASC";
                            
                            sforce.connection.query(query, {
                                onSuccess : success,
                                onFailure : failure,
                                timeout: 120000,
                                source : ids[i]
                            });
                        }else{
                            setTimeout(function(){
                                MinisterApprovalProcessModule.__willShowAllConsolidatedAdvice();
                            },500);
                            
                        }   
                    }
                        
                    // callback method used for salesforce ajaxtoolkit methods
                    function success(result) {
                      
                        var records = result.getArray("records");
                        if(records[0] != undefined &&  records[0].hasOwnProperty('Id') && incomingMetaData.hasOwnProperty(records[0].Id)){
                            incomingMetaData[records[0].Id]['body'] = 'data:application/pdf;base64,'+records[0].Body;
                           
                            var arrayIndex = getObjectKeyIndex(incomingMetaData,records[0].Id);
                      
                            createAndShowPDF(incomingMetaData[records[0].Id],arrayIndex);
                        }else{
                            // do nothing
                        }
                    }

                    // callback method 
                    function failure(error,source) {
                      //console.log("An error has occurred ::" + error + source + '--' + getObjectKeyIndex(incomingMetaData,source));
                      var errorIndex = getObjectKeyIndex(incomingMetaData,source);
                      if(errorIndex!= null && (error == 'Remote invocation timed out' || error.includes('Remote invocation failed')) ){
                        //show time out message
                        $j('#incomingDocumentView-'+errorIndex).html('');
                        var container = document.getElementById('incomingDocumentView-'+errorIndex);
                        var div = document.createElement("div");
                        div.setAttribute("id","incomingFailToLoad-"+errorIndex);
                        div.setAttribute("style","display:block"); 
                        container.appendChild(div);
                      
                        $j('#incomingFailToLoad-'+errorIndex).html('Unfortunately, this document was unable to load.' +'<br>' + 'Please press “next” or “previous” to open another document.');

                      }
                      
                    }  

                    // create PDF and show default(First) PDF only initialy
                    function createAndShowPDF(attachmentData,index){
            
                        if(attachmentData.body != "" && attachmentData.body != undefined && attachmentData.body != null){
                            PDFRenderModule.renderPDFWithResponseBody(attachmentData.body, 'incomingDocumentView-' + index,$j('#currentCaseNumber').text());
                        }

                        var currentIncomingPointer = helperModule.currentIncomingNumber();
                        if(currentIncomingPointer === index){
                            $j('#incomingLoading-'+index).css('display', 'none');
                            $j('#incomingLoadingMessage-'+index).css('display', 'none');
                            $j('#incomingDocumentView-'+index).css('display','block');
                        }else{
                            $j('#incomingDocumentView-'+index).css('display','none'); 
                        }
                    }

                }
                
                var getObjectKeyIndex = function (obj, keyToFind) {
                    var i = 0, key;

                    for (key in obj) {
                        if (key == keyToFind) {
                            return i;
                        }

                        i++;
                    }

                    return null;
                }

                var createElement = function(elementName,index){

                    var pdfElementName;
                    var loadingElementName;
                    var loadingMessageElement;
                    var loadingMessageText;

                    if(elementName === 'incomingTab'){
                        pdfElementName = 'incomingDocumentView-';
                        loadingElementName = 'incomingLoading-';
                        loadingMessageElement = 'incomingLoadingMessage-';
                        loadingMessageText = 'loadingMessageText';
                    }else if(elementName === 'adviceTab'){
                        pdfElementName = 'actionPlanDocumentView-';
                        loadingElementName = 'adviceLoading-';
                        loadingMessageElement = 'adviceLoadingMessage-';
                        loadingMessageText = 'adviceLoadingMessageText';
                    }else if(elementName === 'precedentTab'){
                        pdfElementName = 'precedentResponseView-';
                        loadingElementName = 'precedentLoading-';
                        loadingMessageElement = 'precedentLoadingMessage-';
                        loadingMessageText = 'precedentLoadingMessageText';
                    }else if(elementName === 'previousCorroTab'){
                        pdfElementName = 'previousCorroDocumentView-';
                        loadingElementName = 'previouscorroLoading-';
                        loadingMessageElement = 'previousCorroLoadingMessage-';
                        loadingMessageText = 'previousCorroLoadingMessageText';
                    }

                    var container = document.getElementById(elementName);
                    var div = document.createElement("div");
                    div.setAttribute("id", pdfElementName + index);
                    if(index == 0){
                        div.setAttribute("style","display:block");
                    }else{
                        div.setAttribute("style", "display: none");
                    }
                    container.appendChild(div);

                    var loadingMessage = document.getElementById(elementName);
                    var loadingMessageDiv = document.createElement("div");
                    loadingMessageDiv.setAttribute("id",loadingMessageText+index);
                    loadingMessageDiv.setAttribute("style","display:block");
                   
                    var incomingResponseContainer = document.getElementById(pdfElementName+index);
                    var loadingDiv = document.createElement("div");
                    loadingDiv.setAttribute("id",loadingElementName+index);
                    loadingDiv.setAttribute("class","contentLoading");
                    
                    incomingResponseContainer.appendChild(loadingDiv);

                    var loadingContainer = document.getElementById(loadingElementName+index);
                    var loadingDiv = document.createElement("img");
                    loadingDiv.setAttribute("src","{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}");
                    loadingContainer.appendChild(loadingDiv);
                    
                    var messageDiv = document.createElement("div");
                    messageDiv.setAttribute("id",loadingMessageElement+index);
                    messageDiv.setAttribute("class","contentLoading");
                    
                    incomingResponseContainer.appendChild(messageDiv);

                    $j('#'+loadingMessageElement+index).html('Your document is being prepared, please stand by.');
                }

              
                // show first incoming document and set display hidden for second document
                var __willShowIncomingList = function() {

                    willFetchAllIncoming().then(function(result) {

                        $j('#incomingErrorMessage').nextAll().remove();
                        $j("#incomingFooter").html('');
                        $j('#incomingErrorMessage').css('display', 'none');

                        $j('#incomingLoading').css('display', 'none');
                        $j('#incomingLoadingMessage').css('display', 'none');
                        
                        attachmentResultSet = [];
                        var showCurrentDocNumber = 0;
                        // create div for each attachment
                        for(var i =0 ; i <incomingMap.length; i++) {
                            createElement("incomingTab",i);
                        }

                        // set default number of incoming
                        sessionStorage.setItem('counterForIncoming', 0);

                        // show footer tempate for first attachment in list
                        var tmplFooter = $j.templates({
                            markup: "#incomingFooterTemplate",
                            allowCode: true
                        });

                        var dataHtmlFooter = tmplFooter.render(result[Object.keys(result)[0]], helperModule);
                        $j("#incomingFooter").html(dataHtmlFooter);
                        
                        $j('#showPreviousIncoming').addClass('disabledbutton');
                        
                        if(showCurrentDocNumber == incomingMap[showCurrentDocNumber].totalCount -1) {
                           $j('#showNextIncoming').addClass('disabledbutton'); 
                        } 
                        showIncomingPDF(result);

                    }).catch(function() {

                        MinisterApprovalProcessModule.__willShowAllConsolidatedAdvice();

                        $j('#incomingErrorMessage').nextAll().remove();
                        $j("#incomingFooter").html('');
                        $j('#incomingErrorMessage').css('display', 'block');

                        $j('#incomingLoading').css('display', 'none');
                        $j('#incomingLoadingMessage').css('display', 'none');

                    })
                };

                // will show next incoming which is in cache and fetch next to put in cache
                var __willShowNextIncoming = function() {

                    var setId = $j("[id^=incomingDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    var index = helperModule.currentIncomingNumber();
                    
                    var nextIncoming = index + 1;
                    sessionStorage.setItem('counterForIncoming', nextIncoming);
                    if(incomingMap[nextIncoming] != "" && incomingMap[nextIncoming] != null && incomingMap[nextIncoming] != undefined){
                        
                        var tmplFooter = $j.templates({
                            markup: "#incomingFooterTemplate",
                            allowCode: true
                        });

                        var dataHtmlFooter = tmplFooter.render(incomingMap[nextIncoming], helperModule);
                        $j("#incomingFooter").html(dataHtmlFooter);

                        var counter = nextIncoming + 1;
                        if(nextIncoming >= incomingMap[nextIncoming].totalCount -1 ){
                            $j('#showNextIncoming').addClass('disabledbutton');
                        }

                    }

                    $j('#incomingDocumentView-' + nextIncoming).scrollTop();
                    $j('#incomingDocumentView-' + nextIncoming).css('display', 'block');

                    // Blank page pdf solution    
                    if($j('#incomingDocumentView-' + nextIncoming).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(incomingMap[nextIncoming].body,'incomingDocumentView-'+nextIncoming,$j('#currentCaseNumber').text());
                    }else if( $j('#incomingDocumentView-' + nextIncoming).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#incomingDocumentView-' + nextIncoming).children();
                        if(!(childElement[0].id).includes('incomingLoading') 
                            && PDFRenderModule.isCanvasTransparent('incomingDocumentView-' + nextIncoming) == true)
                            PDFRenderModule.renderPDFWithResponseBody(incomingMap[nextIncoming].body,'incomingDocumentView-'+nextIncoming,$j('#currentCaseNumber').text());
                    }

                };

               
                // will show prevoius incoming in incoming list
                var __willShowPreviousIncoming = function(event) {

                    var previousItem = helperModule.currentIncomingNumber() - 1;
                    var setId = $j("[id^=incomingDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }
                    $j('#incomingDocumentView-' + previousItem).scrollTop();
                    $j('#incomingDocumentView-' + previousItem).css('display', 'block');

                    // Blank page pdf solution
                    if($j('#incomingDocumentView-' + previousItem).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(incomingMap[previousItem].body,'incomingDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }else if( $j('#incomingDocumentView-' + previousItem).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#incomingDocumentView-' + previousItem).children();
                        if(!(childElement[0].id).includes('incomingLoading') 
                            && PDFRenderModule.isCanvasTransparent('incomingDocumentView-' + previousItem) == true)
                            PDFRenderModule.renderPDFWithResponseBody(incomingMap[previousItem].body,'incomingDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }

                    sessionStorage.setItem('counterForIncoming', previousItem);

                    var tmplFooter = $j.templates({
                        markup: "#incomingFooterTemplate",
                        allowCode: true
                    });
                    var dataHtmlFooter = tmplFooter.render(incomingMap[previousItem], helperModule);
                    $j("#incomingFooter").html(dataHtmlFooter);

                    if (helperModule.currentIncomingNumber() <= 0) {
                        $j('#showPreviousIncoming').addClass('disabledbutton');
                        sessionStorage.setItem('counterForIncoming', 0);
                    }
                };

                // will fetch all previous coorespondance related to Contact present on Case
                var willFetchAllPreviouscorrespondence = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getPreviousCorroRelatedToContact(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                previousCorroMap = [];
                                previousCorroMetaData = '';
                                if (Object.keys(result).length != 0) {
                                    for (var i in result) { 
                                        if (result.hasOwnProperty(i)) { 
                                            previousCorroMap.push(result[i]);
                                        }
                                    }
                                    previousCorroMetaData = result;
                                    var currentCaseNumber = $j('#currentCaseNumber').text();
                                    if (parseInt(currentCaseNumber) === parseInt(previousCorroMap[0].currentCaseNumber))
                                        resolve(result);
                                } else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                 var showPreviousCorroPDF = function(result){
                    
                    var currentPointer;
                    var ids = [];
                    var resultSet = Object.keys(result);
                    for (var a=0; a<resultSet.length; a++) {
                        ids.push(resultSet[a]);
                    }   
                                                                     
                    //soql query to fetch attachment information categorised as 'Incoming'
                    var query ;

                    for(var i = 0; i <= ids.length; i++){
                        if(i < ids.length){
                            query = "Select Id,Body FROM Attachment WHERE Id =\'" + ids[i] + "\' ";
                            
                            sforce.connection.query(query, {
                                onSuccess : success,
                                onFailure : failure,
                                timeout: 120000,
                                source : ids[i]
                            });
                        }   
                    }
                    
                    // callback method used for salesforce ajaxtoolkit methods
                    function success(result) {
                      
                        var records = result.getArray("records");
                        if(records[0] != undefined && records[0].hasOwnProperty('Id') && previousCorroMetaData.hasOwnProperty(records[0].Id)){
                            previousCorroMetaData[records[0].Id]['body'] = 'data:application/pdf;base64,'+records[0].Body;
                                                
                            var arrayIndex = getObjectKeyIndex(previousCorroMetaData,records[0].Id);
                      
                            createAndShowPDF(previousCorroMetaData[records[0].Id],arrayIndex);
                        }
                    }

                    // callback method 
                    function failure(error,source) {
                        //console.log("An error has occurred ::" +source + '--' + getObjectKeyIndex(previousCorroMetaData,source));
                        var errorIndex = getObjectKeyIndex(previousCorroMetaData,source);
                        if(errorIndex != null && (error == 'Remote invocation timed out' || error.includes('Remote invocation failed'))){
                            //show time out message
                            $j('#previousCorroDocumentView-'+errorIndex).html('');
                            var container = document.getElementById('previousCorroDocumentView-'+errorIndex);
                            var div = document.createElement("div");
                            div.setAttribute("id","corroFailToLoad-"+errorIndex);
                            div.setAttribute("style","display:block"); 
                            container.appendChild(div);

                            $j('#corroFailToLoad-'+errorIndex).html('Unfortunately, this document was unable to load.' +'<br>' + 'Please press “next” or “previous” to open another document.');

                        }
                      
                    }  

                    // create PDF and show default(First) PDF only initialy
                    function createAndShowPDF(attachmentData,index){
            
                        if(attachmentData.body != "" && attachmentData.body != undefined && attachmentData.body != null){
                            PDFRenderModule.renderPDFWithResponseBody(attachmentData.body, 'previousCorroDocumentView-' + index,$j('#currentCaseNumber').text());
                        }

                        var currentCorroPointer = helperModule.currentPreviousCorroNumber();
                        if(currentCorroPointer === index){
                            $j('#previouscorroLoading-'+index).css('display', 'none');
                            $j('#previousCorroLoadingMessage-'+index).css('display', 'none');
                            $j('#previousCorroDocumentView-'+index).css('display','block');
                        }else{
                            $j('#previousCorroDocumentView-'+index).css('display','none'); 
                        }
                    }
                }

                // show first previous Corro document and set display hidden for second document
                var __willShowPreviousCorroList = function() {

                    willFetchAllPreviouscorrespondence().then(function(result) {

                        $j('#corroErrorMessage').css('display', 'none');
                        $j("#previousCorroFooter").html('');
                        $j('#corroErrorMessage').nextAll().remove();

                        $j('#previouscorroLoading').css('display', 'none');
                        $j('#previousCorroLoadingMessage').css('display', 'none');

                        var showCurrentDocNumber = 0;
                        // create div for each attachment
                        for(var i =0 ; i <previousCorroMap.length; i++) {
                            createElement("previousCorroTab",i);
                        }

                        // set default number of incoming
                        sessionStorage.setItem('counterForPreviousCorro', 0);

                        var tmplFooter = $j.templates({
                            markup: "#previousCorroFooterTemplate",
                            allowCode: true
                        });
                        
                        var dataHtmlFooter = tmplFooter.render(result[Object.keys(result)[0]], helperModule);
                        $j("#previousCorroFooter").html(dataHtmlFooter);

                        
                        $j('#showPreviousCorro').addClass('disabledbutton');
                        if(showCurrentDocNumber == previousCorroMap[showCurrentDocNumber].totalCount -1) {
                           $j('#showNextPreviousCorro').addClass('disabledbutton'); 
                        } 

                        setTimeout(function(){
                            showPreviousCorroPDF(result);
                        },1000);

                    }).catch(function() {

                        $j('#previouscorroLoading').css('display', 'none');
                        $j('#previousCorroLoadingMessage').css('display', 'none');
                            
                        $j('#corroErrorMessage').nextAll().remove();
                        $j("#previousCorroFooter").html('');
                        $j('#corroErrorMessage').css('display', 'block');

                    })
                };

                // will show next previousCorro which is in cache and fetch next to put in cache
                var __willShowNextCorro = function() {

                    var setId = $j("[id^=previousCorroDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    var index = helperModule.currentPreviousCorroNumber();
                    
                    var nextCorro = index + 1;
                    sessionStorage.setItem('counterForPreviousCorro', nextCorro);
                    if(previousCorroMap[nextCorro] != "" && previousCorroMap[nextCorro] != null && previousCorroMap[nextCorro] != undefined){
                        
                        var tmplFooter = $j.templates({
                            markup: "#previousCorroFooterTemplate",
                            allowCode: true
                        });

                        var dataHtmlFooter = tmplFooter.render(previousCorroMap[nextCorro], helperModule);
                        $j("#previousCorroFooter").html(dataHtmlFooter);

                        var counter = nextCorro + 1;
                        if(nextCorro >= previousCorroMap[nextCorro].totalCount -1 ){
                            $j('#showNextPreviousCorro').addClass('disabledbutton');
                        }

                    }

                    if($j('#previousCorroDocumentView-' + nextCorro).html() == ''){
                        PDFRenderModule.renderPDFWithResponseBody(previousCorroMap[nextCorro].body,'previousCorroDocumentView-'+nextCorro,$j('#currentCaseNumber').text());
                    }

                    $j('#previousCorroDocumentView-' + nextCorro).scrollTop();
                    $j('#previousCorroDocumentView-' + nextCorro).css('display', 'block');

                    // Blank page PDF solution
                    if($j('#previousCorroDocumentView-' + nextCorro).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(previousCorroMap[nextCorro].body,'previousCorroDocumentView-'+nextCorro,$j('#currentCaseNumber').text());
                    }else if( $j('#previousCorroDocumentView-' + nextCorro).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#previousCorroDocumentView-' + nextCorro).children();
                        if(!(childElement[0].id).includes('previouscorroLoading') 
                            && PDFRenderModule.isCanvasTransparent('previousCorroDocumentView-' + nextCorro) == true)
                            PDFRenderModule.renderPDFWithResponseBody(previousCorroMap[nextCorro].body,'previousCorroDocumentView-'+nextCorro,$j('#currentCaseNumber').text());
                    }

                };

                // will show prevoius incoming in incoming list
                var __willShowPreviousCorro = function(event) {

                    var previousItem = helperModule.currentPreviousCorroNumber() - 1;
                    
                    var setId = $j("[id^=previousCorroDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    $j('#previousCorroDocumentView-' + previousItem).scrollTop();
                    $j('#previousCorroDocumentView-' + previousItem).css('display', 'block');

                    // Blank page pdf solution
                    if($j('#previousCorroDocumentView-' + previousItem).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(previousCorroMap[previousItem].body,'previousCorroDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }else if( $j('#previousCorroDocumentView-' + previousItem).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#previousCorroDocumentView-' + previousItem).children();
                        if(!(childElement[0].id).includes('previouscorroLoading') 
                            && PDFRenderModule.isCanvasTransparent('previousCorroDocumentView-' + previousItem) == true)
                            PDFRenderModule.renderPDFWithResponseBody(previousCorroMap[previousItem].body,'previousCorroDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }

                    sessionStorage.setItem('counterForPreviousCorro', previousItem);

                    var tmplFooter = $j.templates({
                        markup: "#previousCorroFooterTemplate",
                        allowCode: true
                    });
                    var dataHtmlFooter = tmplFooter.render(previousCorroMap[previousItem], helperModule);
                    $j("#previousCorroFooter").html(dataHtmlFooter);

                    if (helperModule.currentPreviousCorroNumber() <= 0) {
                        $j('#showPreviousCorro').addClass('disabledbutton');
                        sessionStorage.setItem('counterForPreviousCorro', 0);
                    }
                };


                // will fetch all action plans for advice section 
                var willFetchAllConsolidatedAdvice = function() {
                    return new Promise(function(resolve, reject) {
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getConsolidatedAdviceList(
                            $j('#currentCaseNumber').text(),
                            function(result, event) {
                                adviceMetaData = '';
                                adviceMap = [];
                                if (Object.keys(result).length != 0) {
                                    for (var i in result) {
                                        if (result.hasOwnProperty(i)) { 
                                            adviceMap.push(result[i]);
                                        }
                                    }
                                    adviceMetaData = result;
                                    var currentCaseNumber = $j('#currentCaseNumber').text();
                                    if (parseInt(currentCaseNumber) === parseInt(adviceMap[0].caseNumber))
                                        resolve(result);
                                } else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };

                 var showAdvicePDF = function(result){
                    
                    var currentPointer;
                    var ids = [];
                    var resultSet = Object.keys(result);
                    for (var a=0; a<resultSet.length; a++) {
                        ids.push(resultSet[a]);
                    }   
                                                                     
                    //soql query to fetch attachment information categorised as 'Incoming'
                    var query ;

                    for(var i = 0; i <= ids.length; i++){
                        if(i < ids.length){
                            query = "Select Id,Body FROM Attachment WHERE Id =\'" + ids[i] + "\' ";
                            
                            sforce.connection.query(query, {
                                onSuccess : success,
                                onFailure : failure,
                                timeout: 120000,
                                source : ids[i]
                            });
                        }else{
                            setTimeout(function(){
                                MinisterApprovalProcessModule.__willShowPrecedents();
                            },500);
                            
                        }   
                    }
                    
                    // callback method used for salesforce ajaxtoolkit methods
                    function success(result) {
                      
                        var records = result.getArray("records");
                      
                        if(records[0] != undefined && records[0].hasOwnProperty('Id') && adviceMetaData.hasOwnProperty(records[0].Id)){
                            adviceMetaData[records[0].Id]['body'] = 'data:application/pdf;base64,'+records[0].Body;
                      
                            var arrayIndex = getObjectKeyIndex(adviceMetaData,records[0].Id);
                            createAndShowPDF(adviceMetaData[records[0].Id],arrayIndex);
                        }
                    }

                    // callback method 
                    function failure(error,source) {
                        //console.log("An error has occurred ::" + error + source + '--' + getObjectKeyIndex(adviceMetaData,source));
                        var errorIndex = getObjectKeyIndex(adviceMetaData,source);
                        if(errorIndex != null && (error == 'Remote invocation timed out' || error.includes('Remote invocation failed'))){
                            //show time out message
                            $j('#actionPlanDocumentView-'+errorIndex).html('');
                            var container = document.getElementById('actionPlanDocumentView-'+errorIndex);
                            var div = document.createElement("div");
                            div.setAttribute("id","adviceFailToLoad-"+errorIndex);
                            div.setAttribute("style","display:block"); 
                            container.appendChild(div);

                            $j('#adviceFailToLoad-'+errorIndex).html('Unfortunately, this document was unable to load.' +'<br>' + 'Please press “next” or “previous” to open another document.');

                        }
                      
                    }  

                    // create PDF and show default(First) PDF only initialy
                    function createAndShowPDF(attachmentData,index){
            
                        if(attachmentData.body != "" && attachmentData.body != undefined && attachmentData.body != null){
                            PDFRenderModule.renderPDFWithResponseBody(attachmentData.body, 'actionPlanDocumentView-' + index,$j('#currentCaseNumber').text());
                        }

                        var currentAdvicePointer = helperModule.currentAdviceNumber();
                        if(currentAdvicePointer === index){
                            $j('#adviceLoading-'+index).css('display', 'none');
                            $j('#adviceLoadingMessage-'+index).css('display', 'none');
                            $j('#actionPlanDocumentView-'+index).css('display','block');
                        }else{
                            $j('#actionPlanDocumentView-'+index).css('display','none'); 
                        }
                    }

                }

                // will show all consilated action plans in a single scrollable option
                var __willShowAllConsolidatedAdvice = function() {

                    willFetchAllConsolidatedAdvice().then(function(result) {

                        $j('#adviceErrorMessage').css('display', 'none');
                        $j("#adviceDocumentSectionFooter").html('');
                        $j('#adviceErrorMessage').nextAll().remove();

                        $j('#adviceLoading').css('display', 'none');
                        $j('#adviceLoadingMessage').css('display', 'none');

                        var showCurrentDocNumber = 0;
                        // create div for each attachment
                        for(var i =0 ; i <adviceMap.length; i++) {
                           
                            createElement("adviceTab",i);
                        }

                        // set default number of incoming
                        sessionStorage.setItem('counterForAdvice', 0);

                        var tmplFooter = $j.templates({
                            markup: "#consolidatedAdviceFooterTemplate",
                            allowCode: true
                        });
                        
                        var dataHtmlFooter = tmplFooter.render(result[Object.keys(result)[0]], helperModule);
                        $j("#adviceDocumentSectionFooter").html(dataHtmlFooter);

                        
                        $j('#showPreviousAdvice').addClass('disabledbutton');
                        if(showCurrentDocNumber == adviceMap[showCurrentDocNumber].totalCount -1) {
                           $j('#showNextAdvice').addClass('disabledbutton'); 
                        } 

                        showAdvicePDF(result);
                        
                    }).catch(function() {

                        $j('#adviceLoading').css('display', 'none');
                        $j('#adviceLoadingMessage').css('display', 'none');

                        MinisterApprovalProcessModule.__willShowPrecedents();

                        $j('#adviceErrorMessage').css('display', 'block');
                        $j("#adviceDocumentSectionFooter").html('');
                        $j('#adviceErrorMessage').nextAll().remove();
                        
                    })
                };

                // will show next previousCorro which is in cache and fetch next to put in cache
                var __willShowNextAdvice = function() {
                    
                    var setId = $j("[id^=actionPlanDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    var index = helperModule.currentAdviceNumber();
                    
                    var nextAdvice = index + 1;
                    sessionStorage.setItem('counterForAdvice', nextAdvice);
                    if(adviceMap[nextAdvice] != "" && adviceMap[nextAdvice] != null && adviceMap[nextAdvice] != undefined){
                        
                        var tmplFooter = $j.templates({
                            markup: "#consolidatedAdviceFooterTemplate",
                            allowCode: true
                        });

                        var dataHtmlFooter = tmplFooter.render(adviceMap[nextAdvice], helperModule);
                        $j("#adviceDocumentSectionFooter").html(dataHtmlFooter);

                        var counter = nextAdvice + 1;
                        if(nextAdvice >= adviceMap[nextAdvice].totalCount -1 ){
                            $j('#showNextAdvice').addClass('disabledbutton');
                        }

                    }

                    if($j('#actionPlanDocumentView-' + nextAdvice).html() == ''){
                        PDFRenderModule.renderPDFWithResponseBody(adviceMap[nextAdvice].body,'actionPlanDocumentView-'+nextAdvice,$j('#currentCaseNumber').text());
                    }

                    $j('#actionPlanDocumentView-' + nextAdvice).scrollTop();
                    $j('#actionPlanDocumentView-' + nextAdvice).css('display', 'block');

                    // Blank page pdf solution
                    if($j('#actionPlanDocumentView-' + nextAdvice).html() == ''){  // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(adviceMap[nextAdvice].body,'actionPlanDocumentView-'+nextAdvice,$j('#currentCaseNumber').text());
                    }else if( $j('#actionPlanDocumentView-' + nextAdvice).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#actionPlanDocumentView-' + nextAdvice).children();
                        if(!(childElement[0].id).includes('adviceLoading') 
                            && PDFRenderModule.isCanvasTransparent('actionPlanDocumentView-' + nextAdvice) == true)
                            PDFRenderModule.renderPDFWithResponseBody(adviceMap[nextAdvice].body,'actionPlanDocumentView-'+nextAdvice,$j('#currentCaseNumber').text());
                    }

                };

                // will show prevoius incoming in incoming list
                var __willShowPreviousAdvice = function(event) {

                    var previousItem = helperModule.currentAdviceNumber() - 1;
                    
                    var setId = $j("[id^=actionPlanDocumentView]");
                    for (var i = 0; i < setId.length; i++) {
                        var getId = setId[i].id;
                        $j('#' + getId).css('display', 'none');
                    }

                    $j('#actionPlanDocumentView-' + previousItem).scrollTop();
                    $j('#actionPlanDocumentView-' + previousItem).css('display', 'block');

                    // Blank page pdf solution
                    if($j('#actionPlanDocumentView-' + previousItem).html() == ''){ // check if dom element was not created for the document
                        PDFRenderModule.renderPDFWithResponseBody(adviceMap[previousItem].body,'actionPlanDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }else if( $j('#actionPlanDocumentView-' + previousItem).css('display') === 'block' ){ // check if the canvas is blank and canvas is displayed
                        var childElement = $j('#actionPlanDocumentView-' + previousItem).children();
                        if(!(childElement[0].id).includes('adviceLoading') 
                            && PDFRenderModule.isCanvasTransparent('actionPlanDocumentView-' + previousItem) == true)
                            PDFRenderModule.renderPDFWithResponseBody(adviceMap[previousItem].body,'actionPlanDocumentView-'+previousItem,$j('#currentCaseNumber').text());
                    }

                    sessionStorage.setItem('counterForAdvice', previousItem);

                    var tmplFooter = $j.templates({
                        markup: "#consolidatedAdviceFooterTemplate",
                        allowCode: true
                    });
                    var dataHtmlFooter = tmplFooter.render(adviceMap[previousItem], helperModule);
                    $j("#adviceDocumentSectionFooter").html(dataHtmlFooter);

                    if (helperModule.currentAdviceNumber() <= 0) {
                        $j('#showPreviousAdvice').addClass('disabledbutton');
                        sessionStorage.setItem('counterForAdvice', 0);
                    }
                };

                var willFetchAmendment = function() {
                    return new Promise(function(resolve, reject) {
                        var caseNum = '{!CaseNumber}';
                        if($j('#currentCaseNumber').text() != '' && $j('#currentCaseNumber').text() != null){
                            caseNum = $j('#currentCaseNumber').text();
                        }    
                        // Set timeout at page level
                        Visualforce.remoting.timeout = 120000;
                        MinisterApprovalViewController.getAmendmentsList(
                            caseNum,
                            function(result, event) {
                                amendmentMap = [];
                                if (Object.keys(result).length != 0) {
                                    var currentCaseNumber = $j('#currentCaseNumber').text();
                                    if (parseInt(currentCaseNumber) === parseInt(result.currentCaseNumber)){
                                        amendmentMap.push(result);
                                        resolve(result);
                                    }
                                } else
                                    reject();
                            }, {
                                escape: false
                            });
                    })
                };


                var __willShowAmendment = function() {

                    willFetchAmendment().then(function(result) {

                        headerSectionToEnable.push('amendment_menu');

                        $j('#amendmentPDF').html('');
                        $j('#amendmentRejectionComment').html('');
                        $j('.amendment_menu').css('display', 'block');

                        setTimeout(function() {
                            PDFRenderModule.renderPDFWithResponseBody(result.body, 'amendmentPDF',$j('#currentCaseNumber').text());
                        }, 3000);

                        var amendmentCommentTmpl = $j.templates({
                            markup: "#amendmentHeaderTemplate",
                            allowCode: true
                        });
                        var amendmentDataHtml = amendmentCommentTmpl.render(result, helperModule);

                        $j('#amendmentRejectionComment').html(amendmentDataHtml);

                        var amendmentInfoTmpl = $j.templates({
                            markup: "#amendmentFooterTemplate",
                            allowCode: true
                        });
                        var amendmentInfoDataHtml = amendmentInfoTmpl.render(result, helperModule);
                        $j('#amendmentFooter').html(amendmentInfoDataHtml);
                        $j('#amendmentFooter').css('display', 'block');


                    }).catch(function() {

                        $j('#amendmentLoading').css('display', 'none');
                        $j('#amendmentLoadingMessage').css('display', 'none');
                        $j('.amendment_menu').css('display', 'none');
                        
                    })

                };

                var getIncomingMap = function(){
                    return incomingMap;
                };

                var getPreviousCorroMap = function(){
                    return previousCorroMap;
                };

                var getPrecedentsMap = function(){
                    return precedentMap;
                };

                var getAdviceMap = function(){
                    return adviceMap;
                };

                var getResponseMap = function(){
                    return responseMap;
                };

                var getAmendmentMap = function(){
                    return amendmentMap;
                }

                return {
                    __willRenderPDF: __willRenderPDF,
                    __willShowCaseInformation: __willShowCaseInformation,
                    __willShowAfterSavingRejectionComment: __willShowAfterSavingRejectionComment,
                    __willShowAfterDeskTopEditing: __willShowAfterDeskTopEditing,
                    __willShowUserDetail: __willShowUserDetail,
                    __willStartApprovalProcess: __willStartApprovalProcess,
                    __willShowResponseBodyForPreview: __willShowResponseBodyForPreview,
                    __willApproveAndGenerateSignedPDF: __willApproveAndGenerateSignedPDF,
                    __willShowEnclosuresList: __willShowEnclosuresList,
                    __willShowCommunicationPreference: __willShowCommunicationPreference,
                    __willShowNextResponseForMOView: __willShowNextResponseForMOView,
                    __willShowPrecedents: __willShowPrecedents,
                    __willShowPreviousPrecedent: __willShowPreviousPrecedent,
                    __willShowNextPrecedent: __willShowNextPrecedent,
                    __willShowIncomingList: __willShowIncomingList,
                    __willShowNextIncoming: __willShowNextIncoming,
                    __willShowPreviousIncoming: __willShowPreviousIncoming,
                    __willShowPreviousCorroList: __willShowPreviousCorroList,
                    __willShowPreviousCorro: __willShowPreviousCorro,
                    __willShowNextCorro: __willShowNextCorro,
                    __willShowHideHeaderSection: __willShowHideHeaderSection,
                    __willShowPreviousAdvice: __willShowPreviousAdvice,
                    __willShowNextAdvice: __willShowNextAdvice,
                    __willShowAllConsolidatedAdvice: __willShowAllConsolidatedAdvice,
                    __willShowAmendment: __willShowAmendment,
                    getIncomingMap : getIncomingMap,
                    getPreviousCorroMap : getPreviousCorroMap,
                    getPrecedentsMap : getPrecedentsMap,
                    getAdviceMap : getAdviceMap,
                    getResponseMap : getResponseMap,
                    getAmendmentMap : getAmendmentMap


                }

            })();

            // jsRender helper module 
            var helperModule = function() {

                var bytesToSize = function(bytes) {
                    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                    if (bytes == 0) return 'n/a';
                    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
                    if (i == 0) return bytes + ' ' + sizes[i];
                    return (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
                };

                var convertMilliSecondsToDate = function(milliseconds) {
                    return moment(milliseconds).format('DD/MM/YYYY')
                };

                var currentPrecdentNumber = function() {
                    return parseInt(sessionStorage.getItem('counterForPrecedent'));
                };

                var currentPrecdentNumberToShow = function() {
                    return parseInt(sessionStorage.getItem('counterForPrecedent'))+1;
                };

                var currentIncomingNumber = function() {
                    return parseInt(sessionStorage.getItem('counterForIncoming')) ;
                };

                var currentIncomingNumberToShow = function() {
                    return parseInt(sessionStorage.getItem('counterForIncoming'))+1 ;
                };

                var currentPreviousCorroNumber = function() {
                    return parseInt(sessionStorage.getItem('counterForPreviousCorro'));
                };

                var currentPreviousCorroNumberToShow = function() {
                    return parseInt(sessionStorage.getItem('counterForPreviousCorro'))+1;
                };

                var currentAdviceNumber = function() {
                    return parseInt(sessionStorage.getItem('counterForAdvice'));
                };

                var currentAdviceNumberToShow = function() {
                    return parseInt(sessionStorage.getItem('counterForAdvice'))+1 ;
                };

                var sortedColumnIndex = function() {
                    return sortByColumnIndex;
                };

                var sortedOrderIndex = function() {
                    return sortOrderIndex;
                };

                var replaceNewLine = function(result) {
                    return result.split("\n").join("<br/>");
                };

                return {
                    bytesToSize: bytesToSize,
                    convertMilliSecondsToDate: convertMilliSecondsToDate,
                    currentPrecdentNumber: currentPrecdentNumber,
                    currentIncomingNumber: currentIncomingNumber,
                    currentPreviousCorroNumber: currentPreviousCorroNumber,
                    currentAdviceNumber: currentAdviceNumber,
                    sortedColumnIndex: sortedColumnIndex,
                    replaceNewLine: replaceNewLine,
                    currentIncomingNumberToShow  : currentIncomingNumberToShow,
                    currentAdviceNumberToShow : currentAdviceNumberToShow,
                    currentPrecdentNumberToShow : currentPrecdentNumberToShow,
                    currentPreviousCorroNumberToShow : currentPreviousCorroNumberToShow
                }

            }();

            // page loading controller to show and hide loading
            var pageLoadingController = (function() {

                var showLoading = function() {
                    $j('.slds-spinner_container').css('display', 'block');
                };

                var hideLoading = function() {
                    $j('.slds-spinner_container').css('display', 'none');
                };

                return {
                    showLoading: showLoading,
                    hideLoading: hideLoading
                }

            })();

            // module having snackbar to show and hide
            var snackBarController = (function() {

                var showSnackBar = function() {
                    // Add the "show" class to DIV
                    var snackBarClass = $j('#snackbar').addClass('show');

                    // After 5 seconds, remove the show class from DIV
                    setTimeout(function() {
                        snackBarClass = $j('#snackbar').toggleClass("show", "");
                    }, 4000);
                };

                return {
                    showSnackBar: showSnackBar
                }

            })();

            // PDF render module 
            var PDFRenderModule = (function() {

                var renderPDFWithResponseBody = function(content, containerId, currentCaseNumber) {
                    $j('#' + containerId).html('');
                    var myData = convertDataURIToBinary(content); //put it in a Uint8Array
                    
                    PDFJS.getDocument(myData).then(function(pdf) {
                        
                        // Get div#container and cache it for later use
                        var container = document.getElementById(containerId);

                        // Loop from 1 to total_number_of_pages in PDF document
                        for (var i = 1; i <= pdf.numPages; i++) {

                            // Get desired page
                            pdf.getPage(i).then(function(page) {

                                var scale = 3;
                                var viewport = page.getViewport(scale);
                                var div = document.createElement("div");

                                // Set id attribute with page-#{pdf_page_number} format
                                div.setAttribute("id", "page-" + (page.pageIndex + 1));

                                // This will keep positions of child elements as per our needs
                                div.setAttribute("style", "position: relative");

                                div.setAttribute("style", "height: 100%");

                                // Append div within div#container
                                container.appendChild(div);

                                if (i > 1)
                                    container.appendChild(document.createElement("br"));

                                // Create a new Canvas element
                                var canvas = document.createElement("canvas");

                                canvas.setAttribute("style", "height: 100%");

                                // Append Canvas within div#page-#{pdf_page_number}
                                div.appendChild(canvas);

                                setRenderCount(containerId);

                                var context = canvas.getContext('2d');
                                canvas.height = viewport.height;
                                canvas.width = viewport.width;

                                var renderContext = {
                                    canvasContext: context,
                                    viewport: viewport
                                };

                                // have less time out because these sections show either unsigned response or signed response
                                // for Response, Amendment, Precedent and Previous Corro section/tab
                                if((containerId == 'responsePDF' 
                                    || containerId == 'amendmentPDF' 
                                    || containerId.includes('precedentResponseView')
                                    || containerId.includes('previousCorroDocumentView') ) 
                                    && $j('#currentCaseNumber').text() == currentCaseNumber){
                                    setTimeout(function(){
                                    
                                        if($j("#"+containerId).css('display') === 'block'){
                                            var childElement = $j('#'+containerId).children();
                                            if(childElement != null && !(childElement[0].id).includes('Loading') 
                                                && isCanvasTransparent(containerId) === true ){
                                                checkRenderCount(content,containerId,currentCaseNumber);
                                            }
                                        }
                                        
                                    },1000);     
                                }else{ // For Incoming and Advice section
                                    if($j('#currentCaseNumber').text() == currentCaseNumber){
                                        setTimeout(function(){
                                    
                                            if($j("#"+containerId).css('display') === 'block'){
                                                var childElement = $j('#'+containerId).children();
                                                if(childElement != null && !(childElement[0].id).includes('Loading') 
                                                    && isCanvasTransparent(containerId) === true ){
                                                    checkRenderCount(content,containerId,currentCaseNumber);
                                                }
                                            }
                                            
                                        },1500);
                                    }
                                    
                                }
                               
                                if($j('#currentCaseNumber').text() == currentCaseNumber){
                                    var renderTask = page.render(renderContext);
                                    renderTask.then(function () {
                                        if (containerId == 'responsePDF') {
                                            pageLoadingController.hideLoading();
                                            MinisterApprovalProcessModule.getResponseMap()[0].rendered = true;
                                        }else if(containerId == 'amendmentPDF'){
                                            MinisterApprovalProcessModule.getAmendmentMap()[0].rendered = true;
                                            $j('#amendmentLoading').css('display', 'none');
                                            $j('#amendmentLoadingMessage').css('display', 'none');
                                            $j('#amendmentRejectionComment').css('display', 'block');
                                        }else if(containerId.includes('incomingDocumentView')){
                                            MinisterApprovalProcessModule.getIncomingMap()[containerId.split('-')[1]].rendered = true;
                                        }else if(containerId.includes('actionPlanDocumentView')){
                                            MinisterApprovalProcessModule.getAdviceMap()[containerId.split('-')[1]].rendered = true;
                                        }else if(containerId.includes('precedentResponseView')){
                                            MinisterApprovalProcessModule.getPrecedentsMap()[containerId.split('-')[1]].rendered = true;
                                        }else if(containerId.includes('previousCorroDocumentView')){
                                            MinisterApprovalProcessModule.getPreviousCorroMap()[containerId.split('-')[1]].rendered = true;
                                        }
                                       
                                    }).catch(function(error){
                                        console.log('Error :: ' + error);
                                    });
                                }
                           });
                        }

                    }).catch(function(error){
                        console.log('Error :: ' + error + '::' + containerId);
                    });

                };

                // set render property for each section document data set.
                var setRenderCount = function(containerId){
                    if(containerId.includes('responsePDF')){    
                        var responseRenderObject = MinisterApprovalProcessModule.getResponseMap()[0];
                        if(responseRenderObject.hasOwnProperty('renderCount') === false)
                            responseRenderObject.renderCount = 0;
                    }else if(containerId.includes('incomingDocumentView')){
                        var incomingRenderObject = MinisterApprovalProcessModule.getIncomingMap()[containerId.split('-')[1]];
                        if(incomingRenderObject.hasOwnProperty('renderCount') === false)
                            incomingRenderObject.renderCount = 0
                    }else if(containerId.includes('actionPlanDocumentView')){
                        var adviceRenderObject = MinisterApprovalProcessModule.getAdviceMap()[containerId.split('-')[1]];
                        if(adviceRenderObject.hasOwnProperty('renderCount') === false)
                            adviceRenderObject.renderCount = 0
                    }else if(containerId.includes('precedentResponseView')){
                        var precedentRenderObject = MinisterApprovalProcessModule.getPrecedentsMap()[containerId.split('-')[1]];
                        if(precedentRenderObject.hasOwnProperty('renderCount') === false)
                            precedentRenderObject.renderCount = 0
                    }else if(containerId.includes('previousCorroDocumentView')){
                        var previousCorroRenderObject = MinisterApprovalProcessModule.getPreviousCorroMap()[containerId.split('-')[1]];
                        if(previousCorroRenderObject.hasOwnProperty('renderCount') === false)
                            previousCorroRenderObject.renderCount = 0
                    }else if(containerId.includes('amendmentPDF')){    
                        var amendmentRenderObject = MinisterApprovalProcessModule.getAmendmentMap()[0];
                        if(amendmentRenderObject.hasOwnProperty('renderCount') === false)
                            amendmentRenderObject.renderCount = 0;
                    }
                };

                // increase render count property for each section/tab to detect the action reuired for rendering or notification message
                var increaseRenderCount = function(containerId){
                    if(containerId.includes('responsePDF')){
                        MinisterApprovalProcessModule.getResponseMap()[0].renderCount++;
                    }else if(containerId.includes('incomingDocumentView')){
                        MinisterApprovalProcessModule.getIncomingMap()[containerId.split('-')[1]].renderCount++;
                    }else if(containerId.includes('actionPlanDocumentView')){
                        MinisterApprovalProcessModule.getAdviceMap()[containerId.split('-')[1]].renderCount++;
                    }else if(containerId.includes('precedentResponseView')){
                        MinisterApprovalProcessModule.getPrecedentsMap()[containerId.split('-')[1]].renderCount++;
                    }else if(containerId.includes('previousCorroDocumentView')){
                        MinisterApprovalProcessModule.getPreviousCorroMap()[containerId.split('-')[1]].renderCount++;
                    }else if(containerId.includes('amendmentPDF')){
                        MinisterApprovalProcessModule.getAmendmentMap()[0].renderCount++;
                    }
                };

                // check render count property for each section/tab to repaint or to show the notification message to the end user
                var checkRenderCount = function(content,containerId,currentCaseNumber){
                    if(containerId.includes('responsePDF')){  
                        if(MinisterApprovalProcessModule.getResponseMap()[0].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getResponseMap()[0].renderCount >= 1){
                            $j('#'+containerId).html('');
                            createErrorMessageElement(containerId,'responseErrorBlock');
                        }
                    }else if(containerId.includes('incomingDocumentView')){
                        if(MinisterApprovalProcessModule.getIncomingMap()[containerId.split('-')[1]].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getIncomingMap()[containerId.split('-')[1]].renderCount >= 1){
                            $j('#'+containerId).html('');
                            createErrorMessageElement(containerId,'incomingFailToLoad-'+containerId.split('-')[1]);
                        }
                    }else if(containerId.includes('actionPlanDocumentView')){
                        if(MinisterApprovalProcessModule.getAdviceMap()[containerId.split('-')[1]].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getAdviceMap()[containerId.split('-')[1]].renderCount > 1){
                            createErrorMessageElement(containerId,'adviceFailToLoad-'+containerId.split('-')[1]);
                       }
                    }else if(containerId.includes('precedentResponseView')){
                        if(MinisterApprovalProcessModule.getPrecedentsMap()[containerId.split('-')[1]].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getPrecedentsMap()[containerId.split('-')[1]].renderCount > 1){
                            createErrorMessageElement(containerId,'precedentFailToLoad-'+containerId.split('-')[1]);
                        }
                    }else if(containerId.includes('previousCorroDocumentView')){
                        if(MinisterApprovalProcessModule.getPreviousCorroMap()[containerId.split('-')[1]].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getPreviousCorroMap()[containerId.split('-')[1]].renderCount > 1){
                            createErrorMessageElement(containerId,'corroFailToLoad-'+containerId.split('-')[1]);
                        }
                    }else if(containerId.includes('amendmentPDF')){ 
                        if(MinisterApprovalProcessModule.getAmendmentMap()[0].renderCount < 1){
                            renderPDFWithResponseBody(content,containerId,currentCaseNumber);
                        }else if(MinisterApprovalProcessModule.getAmendmentMap()[0].renderCount >= 1){
                            $j('#'+containerId).html('');
                            createErrorMessageElement(containerId,'amendmentErrorBlock');
                        }
                    }
                    increaseRenderCount(containerId);                    
                };

                var createErrorMessageElement = function(containerId,setDivName){
                    var container = document.getElementById(containerId);
                    var div = document.createElement("div");
                    div.setAttribute("id",setDivName);
                    div.setAttribute("style","display:block"); 
                    container.appendChild(div);

                    $j('#'+setDivName).html('Unfortunately, this document was unable to load.');
                        
                }

                // convert base64 data to binary data
                var convertDataURIToBinary = function(dataURI) {

                    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
                    var base64 = dataURI.substring(base64Index);
                    var raw = window.atob(base64);
                    var rawLength = raw.length;
                    var array = new Uint8Array(new ArrayBuffer(rawLength));

                    for (var i = 0; i < rawLength; i++) {
                        array[i] = raw.charCodeAt(i);
                    }

                    return array;
                };

                var isCanvasTransparent = function(canvasContainerId) { // true if all pixels Alpha equals to zero
                    var canvas=$j("#"+canvasContainerId).find('canvas')[0];
                    var ctx=canvas.getContext("2d");
                    var imageData=ctx.getImageData(0,0,canvas.offsetWidth,canvas.offsetHeight);
                    var totalAlpha=0;
                    var totalRed=0;
                    var totalBlue=0;
                    var totalGreen=0;
                    for(var i=0;i<imageData.data.length;i+=4){

                        totalAlpha=totalAlpha+imageData.data[i+3];
                        totalRed=totalRed+imageData.data[i];
                        totalGreen= totalGreen+imageData.data[i+1];
                        totalBlue=totalBlue+imageData.data[i+2];

                    } 

                    //console.log('total red-'+totalRed);
                    //console.log('total green-'+totalRed);
                    //console.log('total blue-'+totalRed);
                    console.log('average color R'+totalRed*4/imageData.data.length+' G '+totalGreen*4/imageData.data.length+' B '+totalBlue*4/imageData.data.length + '::' + canvasContainerId);
                    if ((totalRed*4/imageData.data.length===totalGreen*4/imageData.data.length && totalGreen*4/imageData.data.length===totalBlue*4/imageData.data.length && totalBlue*4/imageData.data.length===255)
                        || (totalRed*4/imageData.data.length===totalGreen*4/imageData.data.length && totalGreen*4/imageData.data.length===totalBlue*4/imageData.data.length && totalBlue*4/imageData.data.length===0) )

                        return true;
                        return false;

                    }

                return {
                    renderPDFWithResponseBody: renderPDFWithResponseBody,
                    isCanvasTransparent : isCanvasTransparent
                }
            })();



            function afterOnclick(elem, swipeFlag) {
                
                var target = ((swipeFlag == true) ? $j(elem.target.parentElement) : $j(elem));

                $j('.response_menu').removeClass("slds-active");
                $j('#responseTab').addClass("slds-hide");
                $j('#responseTab').removeClass("slds-show");
                $j('.footer').css('display', 'none');

                $j('.enclosures_menu').removeClass("slds-active");
                $j('#enclosureTab').addClass("slds-hide");
                $j('#enclosureTab').removeClass("slds-show");

                $j('.incoming_menu').removeClass("slds-active");
                $j('#incomingTab').addClass("slds-hide");
                $j('#incomingTab').removeClass("slds-show");
                $j('#incomingFooter').css('display', 'none');

                $j('.advice_menu').removeClass("slds-active");
                $j('#adviceTab').addClass("slds-hide");
                $j('#adviceTab').removeClass("slds-show");
                $j('#adviceDocumentSectionFooter').css('display', 'none')

                $j('.precedents_menu').removeClass("slds-active");
                $j('#precedentTab').addClass("slds-hide");
                $j('#precedentTab').removeClass("slds-show");
                $j('#precedentFooter').css('display', 'none');

                $j('.previous_coro').removeClass("slds-active");
                $j('#previousCorroTab').addClass("slds-hide");
                $j('#previousCorroTab').removeClass("slds-show");
                $j('#previousCorroFooter').css('display', 'none');

                $j('.amendment_menu').removeClass("slds-active");
                $j('#amendmentTab').addClass("slds-hide");
                $j('#amendmentTab').removeClass("slds-show");
                $j('#amendmentFooter').css('display', 'none');

                if ($j(target).hasClass('response_menu')) {

                    $j('.response_menu').addClass("slds-active");
                    $j('#responseTab').addClass("slds-show");

                    var instructionText = $j('textarea#rejectionComment').val();
                    if (instructionText != '')
                        $j('.rejectCommentSection').css('display', 'block');
                }

                if ($j(target).hasClass('enclosures_menu')) {

                    $j('.enclosures_menu').addClass("slds-active");
                    $j('#enclosureTab').addClass("slds-show");

                    $j('.rejectCommentSection').css('display', 'none');

                    if(setEnclosuresPositionFlag === true){
                        if($j('#enclosureTab').html() != undefined)
                            $j('#enclosureTab').scrollTop(0);

                    }

                    setEnclosuresPositionFlag = false;   
                }

                if ($j(target).hasClass('incoming_menu')) {

                    $j('.incoming_menu').addClass("slds-active");
                    $j('#incomingTab').addClass("slds-show");
                    $j('.rejectCommentSection').css('display', 'none');
                    $j('#incomingFooter').css('display', 'block');

                    // Blank page PDF solution
                    if(($j('#incomingDocumentView-0').html() == undefined || $j('#incomingDocumentView-0').html() == '') 
                        && MinisterApprovalProcessModule.getIncomingMap() != null ){
                        PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getIncomingMap()[0].body,'incomingDocumentView-0',$j('#currentCaseNumber').text());
                    }else if($j('#incomingDocumentView-0').html() != undefined && $j('#incomingDocumentView-0').html() != ''){
                        var childElement = $j('#incomingDocumentView-0').children();
                        if(MinisterApprovalProcessModule.getIncomingMap() != null 
                            && !(childElement[0].id).includes('incomingLoading') 
                            && PDFRenderModule.isCanvasTransparent('incomingDocumentView-0') == true ){
                                PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getIncomingMap()[0].body,'incomingDocumentView-0',$j('#currentCaseNumber').text());
                        }
                    }

                    if(setIncomingPositionFlag === true){
                        if($j('#incomingDocumentView-0').html() != undefined){
                            $j('#incomingDocumentView-0').parent().scrollTop(0);
                        }
                    }

                    setIncomingPositionFlag = false;   
                }

                if ($j(target).hasClass('advice_menu')) {

                    $j('.advice_menu').addClass("slds-active");
                    $j('#adviceTab').addClass("slds-show");
                    $j('.rejectCommentSection').css('display', 'none');
                    $j('#adviceDocumentSectionFooter').css('display', 'block');

                    // Blank page PDF solution
                    if(($j('#actionPlanDocumentView-0').html() == undefined || $j('#actionPlanDocumentView-0').html() == '') 
                        && MinisterApprovalProcessModule.getAdviceMap() != null ){
                        PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getAdviceMap()[0].body,'actionPlanDocumentView-0',$j('#currentCaseNumber').text());
                    }else if($j('#actionPlanDocumentView-0').html() != undefined && $j('#actionPlanDocumentView-0').html() != ''){
                        var childElement = $j('#actionPlanDocumentView-0').children();
                        if(MinisterApprovalProcessModule.getAdviceMap() != null 
                            && !(childElement[0].id).includes('adviceLoading') 
                            && PDFRenderModule.isCanvasTransparent('actionPlanDocumentView-0') == true ){
                                PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getAdviceMap()[0].body,'actionPlanDocumentView-0',$j('#currentCaseNumber').text());
                        }
                    }

                    if(setAdvicePositionFlag === true){
                        if($j('#actionPlanDocumentView-0').html() != undefined)
                            $j('#actionPlanDocumentView-0').parent().scrollTop(0);
                    }

                    setAdvicePositionFlag = false; 

                }

                if ($j(target).hasClass('precedents_menu')) {

                    $j('.precedents_menu').addClass("slds-active");
                    $j('#precedentTab').addClass("slds-show");
                    $j('.rejectCommentSection').css('display', 'none');
                    $j('#precedentFooter').css('display', 'block');

                    // Blank page PDF solution
                    if(($j('#precedentResponseView-0').html() == undefined || $j('#precedentResponseView-0').html() == '') 
                        && MinisterApprovalProcessModule.getPrecedentsMap() != null ){
                        PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getPrecedentsMap()[0].body,'precedentResponseView-0',$j('#currentCaseNumber').text());
                    }else if($j('#precedentResponseView-0').html() != undefined && $j('#precedentResponseView-0').html() != ''){
                        var childElement = $j('#precedentResponseView-0').children();
                        if(MinisterApprovalProcessModule.getPrecedentsMap() != null 
                            && !(childElement[0].id).includes('precedentLoading') 
                            && PDFRenderModule.isCanvasTransparent('precedentResponseView-0') == true ){
                                PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getPrecedentsMap()[0].body,'precedentResponseView-0',$j('#currentCaseNumber').text());
                        }
                    }

                    if(setPrecedentsPositionFlag === true){
                        if($j('#precedentResponseView-0').html() != undefined)
                            $j('#precedentResponseView-0').parent().scrollTop(0);
                    }

                    setPrecedentsPositionFlag = false; 

                }

                if ($j(target).hasClass('previous_coro')) {

                    $j('.previous_coro').addClass("slds-active");
                    $j('#previousCorroTab').addClass("slds-show");
                    $j('.rejectCommentSection').css('display', 'none');
                    $j('#previousCorroFooter').css('display', 'block');

                     // Blank page PDF solution
                    if(($j('#previousCorroDocumentView-0').html() == undefined || $j('#previousCorroDocumentView-0').html() == '') 
                        && MinisterApprovalProcessModule.getPreviousCorroMap() != null ){
                        PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getPreviousCorroMap()[0].body,'previousCorroDocumentView-0',$j('#currentCaseNumber').text());
                    }else if($j('#previousCorroDocumentView-0').html() != undefined && $j('#previousCorroDocumentView-0').html() != ''){
                        var childElement = $j('#previousCorroDocumentView-0').children();
                        if(MinisterApprovalProcessModule.getPreviousCorroMap() != null 
                            && !(childElement[0].id).includes('precedentLoading') 
                            && PDFRenderModule.isCanvasTransparent('previousCorroDocumentView-0') == true ){
                                PDFRenderModule.renderPDFWithResponseBody(MinisterApprovalProcessModule.getPreviousCorroMap()[0].body,'previousCorroDocumentView-0',$j('#currentCaseNumber').text());
                        }
                    }

                    if(setPreviousCorroPositionFlag === true){
                        if($j('#previousCorroDocumentView-0').html() != undefined)
                            $j('#previousCorroDocumentView-0').parent().scrollTop(0);
                    }

                    setPreviousCorroPositionFlag = false; 
                }

                if ($j(target).hasClass('amendment_menu')) {

                    $j('.amendment_menu').addClass("slds-active");
                    $j('#amendmentTab').addClass("slds-show");
                    $j('.rejectCommentSection').css('display', 'none');
                    $j('#amendmentFooter').css('display', 'block');

                    if(setAmendmentPositionFlag === true){
                        if($j('#amendmentPDF').html() != undefined)
                            $j('#amendmentPDF').parent().scrollTop(0);
                    }

                    setAmendmentPositionFlag = false; 

                }

                if (!$j('#responseTab__item').parent().hasClass('slds-active'))
                    $j('.footer').css('display', 'none');
                else
                    $j('.footer').css('display', 'block');

            }

            function viewEnclosure(attachmentId) {
                window.open('/servlet/servlet.FileDownload?file=' + attachmentId, '_blank');
                return false;
            }
        </script>

        <script id="enclosureView" type="text/x-jsrender">

            <div class="slds-page-header" role="banner" style="margin-left: 2%;margin-right: 2%;">

                <div class="slds-grid">
                    <div class="slds-col slds-has-flexi-truncate">
                        <div class="slds-media slds-no-space slds-grow">
                            <div class="slds-media__figure">
                                {{if ContentType == 'application/pdf' || ContentType == 'binary/octet-stream' }}
                                <svg aria-hidden="true" class="slds-icon .slds-icon--large" style="height: 4em;">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/doctype-sprite/svg/symbols.svg#pdf')}"></use>
                                    </svg> {{else ContentType == 'application/msword' }}
                                <svg aria-hidden="true" class="slds-icon .slds-icon--large" style="height: 4em;">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/doctype-sprite/svg/symbols.svg#word')}"></use>
                                    </svg> {{else ContentType == 'image/jpeg' || ContentType == 'image/png' }}
                                <svg aria-hidden="true" class="slds-icon .slds-icon--large" style="height: 4em;">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/doctype-sprite/svg/symbols.svg#image')}"></use>
                                    </svg> {{else}}
                                <svg aria-hidden="true" class="slds-icon .slds-icon--large" style="height: 4em;">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/doctype-sprite/svg/symbols.svg#attachment')}"></use>
                                    </svg> {{/if}}

                            </div>
                            <div class="slds-media__body">
                                <div class="slds-text-title--caps slds-line-height--reset" style="width:100;display: -webkit-box;">
                                    <h3 class="slds-page-header__title slds-m-right--small slds-align-middle" style="font-size: 1.0rem;width:50%;font-weight: 600;">{{:Name}}
                                    </h3>
                                    <h3 class="slds-page-header__title slds-m-right--small slds-align-middle viewEnclousers">
                                        <a href="" onclick="return viewEnclosure('{{:Id}}');" class="displayEnclousers">View Enclosure</a>
                                    </h3>
                                </div>

                                <div class="slds-m-right--small slds-align-middle slds-truncate" title="">Added by:   {{:CreatedBy.Name}}
                                </div>

                                <div class="slds-m-right--small slds-align-middle slds-truncate" title="">File Size:   {{:~bytesToSize(BodyLength)}}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </script>

        <script id="consolidatedAdviceFooterTemplate" type="text/x-jsrender">
            <div style="width: 100%;margin: 0 auto;position: relative;" class="adviceFooterContainer">

                <div class="figure show-icon" style="text-align: right;width: 15%;" id="showPreviousAdvice" onclick="return MinisterApprovalProcessModule.__willShowPreviousAdvice();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_back-previous.png')}" class="goPreviousIcon" alt="Go Prevoius">
                        <p>Previous
                </div>


                <div style="width: 69%;display: inline-block;" id="adviceInfo">

                    <table style="width: 100% ">
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Case Number:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:caseNumber}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Date Received:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:~convertMilliSecondsToDate(createdDate)}}</td>
                            <td style="width: 20%;font-weight: 700;">Item</td>
                        </tr>
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Name:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:name}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Created By:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:createdBy}}</td>
                            <td style="width: 20%;font-weight: 700;">{{:~currentAdviceNumberToShow()}} of {{:totalCount}}</td>
                        </tr>

                    </table>

                </div>

                <div class="figure show-icon" style="text-align: left;width: 15%;" id="showNextAdvice" onclick="return MinisterApprovalProcessModule.__willShowNextAdvice();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_forward-next.png')}" class="goNextIcon" alt="Go Next">
                        <p>Next
                </div>

            </div>
        </script>

        <script id="precendentsFooterTemplate" type="text/x-jsrender">
            <!--    <div class="precedentFooter"> -->
            <div style="width: 100%;margin: 0 auto;position: relative;" class="precedentFooterContainer">

                <div class="figure show-icon" style="text-align: right;width: 15%;" id="showPreviousPrecedent" onclick="return MinisterApprovalProcessModule.__willShowPreviousPrecedent();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_back-previous.png')}" class="goPreviousIcon" alt="Go Prevoius">
                        <p>Previous
                </div>

                <div style="width: 69%;display: inline-block;" id="prcedentInfo">

                    <table style="width: 100% ">
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Case Number:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:caseNumber}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Date Received:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:~convertMilliSecondsToDate(createdDate)}}</td>
                            <td style="width: 20%;font-weight: 700;">Item</td>
                        </tr>
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Name:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:name}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Created By:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:createdBy}}</td>
                            <td style="width: 20%;font-weight: 700;">{{:~currentPrecdentNumberToShow()}} of {{:totalCount}}</td>
                        </tr>

                    </table>

                </div>

                <div class="figure show-icon" style="text-align: left;width: 15%;" id="showNextPrecedent" onclick="return MinisterApprovalProcessModule.__willShowNextPrecedent();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_forward-next.png')}" class="goNextIcon" alt="Go Next">
                        <p>Next
                </div>


            </div>
            <!--  </div> -->
        </script>


        <script id="incomingFooterTemplate" type="text/x-jsrender">
            <div style="width: 100%;margin: 0 auto;position: relative;" class="IncomingFooterContainer">


                <div class="figure show-icon" style="text-align: right;width: 15%;" id="showPreviousIncoming" onclick="return MinisterApprovalProcessModule.__willShowPreviousIncoming();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_back-previous.png')}" class="goPreviousIcon" alt="Go Prevoius">
                        <p>Previous
                </div>


                <div style="width: 67%;display: inline-block;" id="incomingInfo">

                    <table style="width: 100% ">
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Case Number:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:caseNumber}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Date Received:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:~convertMilliSecondsToDate(createdDate)}}</td>
                            <td style="text-align: center;width: 20%;font-weight: 700;">Item</td>
                        </tr>
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Name:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:name}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Created By:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:createdBy}}</td>
                            <td style="text-align: center;width: 20%;font-weight: 700;">{{:~currentIncomingNumberToShow()}} of {{:totalCount}}</td>
                        </tr>

                    </table>

                </div>

                <div class="figure show-icon" style="text-align: left;width: 15%;" id="showNextIncoming" onclick="return MinisterApprovalProcessModule.__willShowNextIncoming();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_forward-next.png')}" class="goNextIcon" alt="Go Next">
                        <p>Next
                </div>


            </div>
        </script>

        <!-- Previous Coorespondance Footer Template -->
        <script id="previousCorroFooterTemplate" type="text/x-jsrender">
            <div style="width: 100%;margin: 0 auto;position: relative;" class="previousCorroFooterContainer">


                <div class="figure show-icon" style="text-align: right;width: 15%;" id="showPreviousCorro" onclick="return MinisterApprovalProcessModule.__willShowPreviousCorro();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_back-previous.png')}" class="goPreviousIcon" alt="Go Prevoius">
                        <p>Previous
                </div>

                <div style="width: 67%;display: inline-block;" id="incomingInfo">

                    <table style="width: 100% ">
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Case Number:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:caseNumber}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Date Received:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:~convertMilliSecondsToDate(createdDate)}}</td>
                            <td style="text-align: center;width: 20%;font-weight: 700;">Item</td>
                        </tr>
                        <tr>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Name:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:name}}</td>
                            <td style="text-align: right;width: 20%;font-weight: 700;">Created By:</td>
                            <td style="text-align: left;padding-left: 1%;width: 20%;">{{:createdBy}}</td>
                            <td style="text-align: center;width: 20%;font-weight: 700;">{{:~currentPreviousCorroNumberToShow()}} of {{:totalCount}}</td>
                        </tr>

                    </table>

                </div>

                <div class="figure show-icon" style="text-align: left;width: 15%;" id="showNextPreviousCorro" onclick="return MinisterApprovalProcessModule.__willShowNextCorro();">
                    <p><img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_forward-next.png')}" class="goPreviousIcon" alt="Go Next">
                        <p>Next
                </div>


            </div>
        </script>

        <script id="amendmentHeaderTemplate" type="text/x-jsrender">
            {{if rejectionComment}}
            <div class="slds-popover slds-nubbin--left-top" role="dialog">
                <div class="slds-popover__body">
                    <p style="font-weight: 700;padding-left: 0.5rem;text-align: left;">Rejection Comment(s):</p>
                    <p style="font-weight: 500;padding-left: 0.5rem;text-align: left;">{{:~replaceNewLine(rejectionComment)}}</p>
                </div>
            </div>
            {{/if}}
        </script>



        <script id="amendmentFooterTemplate" type="text/x-jsrender">
            {{if rejectionComment}}
            <div style="width: 100%;display: inline-block;">
                <table style="width: 100% ">
                    <tr>
                        <td style="width: 20%;font-weight: 700;text-align:right">Date Received:</td>
                        <td style="width: 20%;font-weight: 700;padding-left: 1rem;text-align:left">{{:~convertMilliSecondsToDate(createdDate)}}</td>
                        <td style="width: 20%;font-weight: 700;text-align:right">Created By:</td>
                        <td style="width: 20%;font-weight: 700;padding-left: 1rem;text-align:left">{{:createdBy}}</td>
                    </tr>
                </table>
            </div>
            {{/if}}
        </script>

        <script type="text/javascript">
            MinisterApprovalProcessModule.__willRenderPDF();
            setTimeout(MinisterApprovalProcessModule.__willShowEnclosuresList(), 1000);
            setTimeout(MinisterApprovalProcessModule.__willShowAmendment(), 1000);
        </script>
    </head>


    <body>

        <div class="tfnsw-arxxus" style="position:fixed;width:100%;height:100%;background-color: #e4e4e4;">

            <div class="slds-page-header" role="banner">

                <div class="slds-grid">
                    <div class="slds-col slds-has-flexi-truncate">
                        <div class="slds-media slds-no-space slds-grow">
                            <div class="slds-media__figure">
                                <svg aria-hidden="true" class="slds-icon slds-icon-standard-case">
                                    <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/standard-sprite/svg/symbols.svg#case')}"></use>
                                </svg>
                            </div>
                            <div class="slds-media__body">
                                <p class="slds-text-title--caps slds-line-height--reset">
                                    <h1 class="slds-page-header__title slds-m-right--small slds-align-middle caseTitle">{!caseSubject}
                                    </h1>
                                </p>
                                <span style="display:none;" id="currentCaseNumber">{!CaseNumber}</span>
                                <p class="slds-m-right--small slds-align-middle slds-truncate headerValues" style="display:{!if(dueDate != '' ,'block','none')}">{!createdDate}   ●   {!CaseNumber}   ●   {!dueDate}</p>
                                <p class="slds-m-right--small slds-align-middle slds-truncate headerValues" style="display:{!if(dueDate == '' ,'block','none')}">{!createdDate}   ●   {!CaseNumber}</p>
                            </div>
                            <div class="slds-media__figure slds-align-middle" id="caseApprovalQueueImage" style="cursor: pointer;text-align: center;">
                                <svg aria-hidden="true" class="slds-icon slds-icon-standard-case slds-icon--medium">
                                    <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#home')}"></use>
                                </svg>
                                <p class="slds-text-title--caps slds-line-height--reset">
                                    <h1 class="slds-align-middle" style="font-size:10px;font-weight:bold;">Approval Queue</h1>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        
            <div class="pdfPanel">
                <div class="slds-tabs--default" style="height:100%;">

                    <ul class="slds-tabs--default__nav" role="tablist" id="nav-menu">
                        <li class="slds-tabs--default__item slds-text-title--caps slds-active menuItem response_menu" title="RESPONSE" role="presentation" style="display:block;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="responseTab" id="responseTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              RESPONSE
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem enclosures_menu" title="ENCLOSURES" role="presentation" style="display:none;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="enclosureTab" id="enclosureTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              ENCLOSURES
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem incoming_menu" title="INCOMING" role="presentation" style="display:block;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="incomingTab" id="incomingTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              INCOMING
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem advice_menu" title="ADVICE" role="presentation" style="display:block;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="adviceTab" id="adviceTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              ADVICE
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem precedents_menu" title="PRECEDENTS" role="presentation" style="display:block;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="precedentTab" id="precedentTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              PRECEDENTS
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem previous_coro" title="PREVIOUS CORRO" role="presentation" style="display:block;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="previousCorroTab" id="previousCorroTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              PREVIOUS CORRO
                            </a>
                        </li>
                        <li class="slds-tabs--default__item slds-text-title--caps menuItem amendment_menu" title="AMENDMENTS" role="presentation" style="display:none;width:20%;">
                            <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="amendmentTab" id="amendmentTab__item" style="display:inline;padding:10px;" onClick="return afterOnclick(event, true);">
                              AMENDMENTS
                            </a>
                        </li>
                    </ul>

                    <div id="mainContainer" style="height: 100%;">

                        <div id="responseTab" class="slds-tabs--default__content slds-show" role="tabpanel" aria-labelledby="responseTab__item">
                            
                            <div class="slds-modal__header slds-theme--error slds-theme--alert-texture" style="display: none;margin-left: 15%; margin-right: 15%;" id="responseErrorMessage">
                                <div class="slds-col slds-align-middle" style="display: inline-block;">
                                    <svg aria-hidden="true" class="slds-icon slds-icon--medium slds-m-right--medium slds-col slds-no-flex">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <h2 class="slds-text-heading--medium" id="errorMessage">No response found for this case.</h2>
                                </div>
                            </div>
                            <div id="responsePDF"></div>
                        </div>


                        <div id="enclosureTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="enclosureTab__item">
                        </div>

                        <div id="incomingTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="incomingTab__item">

                            <div class="contentLoading" id="incomingLoading">
                                <img src="{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}" />
                            </div>
                            <div class="loadingMessage" id="incomingLoadingMessage">Your document is being prepared, please stand by.</div>

                            <div class="slds-modal__header slds-theme--error slds-theme--alert-texture" id="incomingErrorMessage" style="display: none; margin-left: 15%;    margin-right: 15%;">
                                <div class="slds-col slds-align-middle" style="display: inline-block;">
                                    <svg aria-hidden="true" class="slds-icon slds-icon--medium slds-m-right--medium slds-col slds-no-flex">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <h2 class="slds-text-heading--medium" id="addIncomingErrorMessage">No document found for this case.</h2>
                                </div>
                            </div>

                        </div>

                        <div id="adviceTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="adviceTab__item">

                            <div class="contentLoading" id="adviceLoading">
                                <img src="{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}" />
                            </div>
                            <div class="loadingMessage" id="adviceLoadingMessage">Your document is being prepared, please stand by.</div>

                            <div class="slds-modal__header slds-theme--error slds-theme--alert-texture" style="display: none;margin-left: 15%;margin-right: 15%;" id="adviceErrorMessage">
                                <div class="slds-col slds-align-middle" style="display: inline-block;">
                                    <svg aria-hidden="true" class="slds-icon slds-icon--medium slds-m-right--medium slds-col slds-no-flex">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <h2 class="slds-text-heading--medium" id="addAdviceErrorMessage">No document found for this case.</h2>
                                </div>
                            </div>

                        </div>

                        <div id="precedentTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="precedentTab__item">

                            <div class="contentLoading" id="precedentsLoading">
                                <img src="{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}" />
                            </div>
                            <div class="loadingMessage" id="precedentLoadingMessage">Your document is being prepared, please stand by.</div>

                            <div class="slds-modal__header slds-theme--error slds-theme--alert-texture" id="precedentErrorMessage" style="display: none;margin-left: 15%;    margin-right: 15%;">
                                <div class="slds-col slds-align-middle" style="display: inline-block;">
                                    <svg aria-hidden="true" class="slds-icon slds-icon--medium slds-m-right--medium slds-col slds-no-flex">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <h2 class="slds-text-heading--medium" id="addPrecdentErrorMessage">No document found for this case.</h2>
                                </div>
                            </div>

                        </div>

                        <div id="previousCorroTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="previousCorroTab__item">


                            <div class="contentLoading" id="previouscorroLoading">
                                <img src="{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}" />
                            </div>
                            <div class="loadingMessage" id="previousCorroLoadingMessage">Your document is being prepared, please stand by.</div>

                            <div class="slds-modal__header slds-theme--error slds-theme--alert-texture" style="display: none;margin-left: 15%;margin-right: 15%;" id="corroErrorMessage">
                                <div class="slds-col slds-align-middle" style="display: inline-block;">
                                    <svg aria-hidden="true" class="slds-icon slds-icon--medium slds-m-right--medium slds-col slds-no-flex">
                                        <use xlink:href="{!URLFOR($Resource.SLDS212, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <h2 class="slds-text-heading--medium" id="addCorroErrorMessage">No document found for this case.</h2>
                                </div>
                            </div>

                        </div>

                        <div id="amendmentTab" class="slds-tabs--default__content slds-hide" role="tabpanel" aria-labelledby="amendmentTab__item">
                            <div class="contentLoading" id="amendmentLoading">
                                <img src="{!URLFOR($Resource.JSPDF, 'image/ajax-loader.gif')}" />
                            </div>
                            <div class="loadingMessage" id="amendmentLoadingMessage">Your document is being prepared, please stand by.</div>
                            <div id="amendmentRejectionComment" style="display: none;"></div>
                            <div id="amendmentPDF"></div>
                        </div>

                    </div>

                </div>
            </div>

            <!-- The actual snackbar -->
            <div id="snackbar"></div>

            <!-- Ligthning Spinner -->
            <div class="slds-spinner_container" style="display:none;">
                <div class="slds-spinner--brand slds-spinner slds-spinner--large" role="alert">
                    <span class="slds-assistive-text">Loading</span>
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
            </div>

            <!-- InfoModal  -->
            <div role="dialog" tabindex="-1" id="messageModal" class="slds-modal slds-fade-in-open infoModal" style="display:none;">
                <div class="slds-modal__container">
                    <div class="slds-modal__content slds-p-around--medium" style="text-align: center;height: 5em;">
                        <div class="sucess"></div>
                    </div>
                    <div class="slds-modal__footer" style="text-align: -webkit-center;">
                        <button class="slds-button slds-button--neutral" id="infoAccepted">Ok</button>
                    </div>
                </div>
            </div>

            <!-- Approval Modal -->
            <div role="dialog" tabindex="-1" aria-labelledby="header43" class="slds-modal slds-fade-in-open approvalInfoModal" id="approvalModal" style="display:none">
                <div class="slds-modal__container">
                    <div class="slds-modal__content slds-p-around--medium" style="width: 100%;text-align: center;">
                        <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;">
                            <div style="width: 100%;margin-left:5%;color: #20ce20;font-size: 1.5em;">Confirm Approval</div>
                        </div>
                        <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;">
                            <div style="width: 100%;margin-left:5%;font-size: 1.2em;color: #5a5454;font-weight: bold;">You are logged in as
                                <div style="font-size: 1em;display: inline-flex;color: #0e0101;font-weight:bold;" class="loogedInUserName"></div>
                            </div>
                        </div>
                        <div style="width: 100%;text-align:center;color: #5a5454;font-weight: bold;font-size: 1.2em;">Communication Preference</div>
                        <div class="slds-form-element__control" id="selectCommunication" style="display: inline-flex;width: 100%;">
                            <label class="slds-radio" style="width:50% !Important;text-align:right;color: #5a5454;font-weight: bold;">
                                <input type="radio" name="options" id="Email" />
                                <span class="slds-radio--faux"></span>
                                <span class="slds-form-element__label" style="color: #5a5454;font-weight: bold;font-size: 1.2em;">Email</span>
                            </label>
                            <label class="slds-radio" style="width:50%;text-align: left;">
                                <input type="radio" name="options" id="Letter" />
                                <span class="slds-radio--faux"></span>
                                <span class="slds-form-element__label" style="color: #5a5454;font-weight: bold;font-size: 1.2em;">Letter</span>
                            </label>
                        </div>
                        <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;">
                            <div style="width: 100%;margin-left:5%;font-size: 1.2em;color: #5a5454;font-weight: bold;padding-top: 0.5em;">The following signature will be added</div>
                        </div>
                        <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;" id="signatureShow">
                            <div style="width: 100%;margin-left:5%;">
                                <img src="" class="ministerSignature" style="display:none;" />
                            </div>
                        </div>
                        <div id="noSignature" style="display:none;color: black;font-size: 1.2em;font-weight:900;">Signature not supplied</div>


                        <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;">
                            <div style="width: 100%;margin-left:5%;font-size: 1.2em;color: #5a5454;font-weight: bold;">What would you like to do next?</div>
                        </div>
                        <button class="slds-button slds-button--destructive" id="approvalCancelIcon">Go Back</button>
                        <!-- button class="slds-button slds-button--neutral slds-button--brand" id="previewWithSignature">Preview with Signature  button  -->
                        <button class="slds-button slds-button--green" id="nextForApproval">Approve, get next</button>
                    </div>
                </div>
            </div>


            <!-- PDFPreviewModal -->
            <div role="dialog" tabindex="-1" aria-labelledby="header43" class="slds-modal slds-fade-in-open pdfPreviewModal" id="pdfModal" style="display:none;">
                <div class="slds-modal__container pdfPreviewContainer">
                    <div class="slds-modal__header">
                        <h2 id="header43" class="slds-text-heading--medium documentName"></h2>
                    </div>
                    <div class="slds-modal__content slds-p-around--medium" style="height: 53em;">
                        <div id="pdfPreviewMode">
                        </div>
                    </div>
                    <div class="slds-modal__footer" style="text-align: center;">
                        <button class="slds-button slds-button--destructive" id='closePreviewModal'>Go Back</button>
                    </div>
                </div>
            </div>

            <!-- Precedents Footer-->
            <div id="precedentFooter" style="display: none;">
            </div>

            <!-- Incomings Footer-->
            <div id="incomingFooter" style="display: none;">
            </div>

            <!-- Previous Corro Footer-->
            <div id="previousCorroFooter" style="display: none;">
            </div>

            <!-- Advice Section Footer-->
            <div id="adviceSectionFooter" style="display: none;">
                <button class="slds-button slds-button--brand">View advice documents.</button>
            </div>

            <!-- Advice Section Footer-->
            <div id="adviceDocumentSectionFooter" style="display: none;">
            </div>

            <!-- Amendment Footer with rejection comment-->
            <div id="amendmentFooter" style="display: none;padding-left: 5rem;padding-right: 5rem;">
            </div>

            <!-- transparent background -->
            <div class="slds-backdrop slds-backdrop--open" style="display:none"></div>

            <!-- footer section -->
            <div class="footer">

	<div style="width: 85%;margin: 0 auto;position: relative;">
	<div class="show-icon" id="rejectIcon" style="width:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'17%;','21.25%')}">
		<img src="{!URLFOR($Resource.JSPDF,'image/circle-back-arrow-red.png')}" class="iconWidth" />
		<span class="caption">REJECT</span>
	</div>

	<div class="show-icon" id="dektopEditingIcon" style="width:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'17%;','21.25%')}">
		<img src="{!URLFOR($Resource.JSPDF,'image/circle-edit-pen-pencil-glyph.png')}" class="iconWidth" />
		<span class="caption">MARK FOR DESKTOP EDITING</span>
	</div>
	<!--     ********************************** -->
	<div class="show-icon" id="Reassign" style="display:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'','none')};width:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'17%;','21.25%')}">
		<img src="{!URLFOR($Resource.JSPDF,'image/circle-arrow_forward-next.png')}" class="iconWidth" onclick="reAssignCall()"/>
		<span class="caption">REASSIGN</span>
	</div>
	<div class="show-icon" id="skipToNext" style="width:width:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'17%;','21.25%')}">
		<img src="{!URLFOR($Resource.JSPDF,'image/circle-next-arrow-yellow.png')}" class="iconWidth" />
		<span class="caption">SKIP TO NEXT</span>
	</div>

	<div class="show-icon" id="approvalIcon" style="width:{!if(OR($Profile.Name == 'System Administrator',$UserRole.DeveloperName = 'DLO_Roads', $UserRole.DeveloperName = 'DLO_Transport', $UserRole.DeveloperName = 'DLO_WestConnex', $UserRole.DeveloperName = 'Policy_Advisor_Roads', $UserRole.DeveloperName = 'Policy_Advisor_Transport', $UserRole.DeveloperName = 'Policy_Advisor_WestConnex', $UserRole.DeveloperName = 'Senior_Executive_Coordinator'),'17%;','21.25%')}">
		<img src="{!URLFOR($Resource.JSPDF,'image/circle-next-arrow-green.png')}" class="iconWidth" />
		<span class="caption">APPROVE</span>
	</div>
</div>
            </div>


            <!-- reject info panel -->

            <div class="bootstrap rejectCommentSection" style="display:none;">

                <div class="headerInfo" style="width: 100%;display: inline-flex;background-color: #E5E7E9;">
                    <div style="font-style: italic;width: 49%;text-align: right;">Instructions will be sent to: &nbsp;</div>
                    <div style="font-style: italic;width: 49%;text-align: left;" id="sentTo"> {!instructionsSentTo}</div>
                </div>

                <div style="width: 100%;display: inline-flex; padding-bottom:0.5em;padding-top:0.5em;">
                    <div style="width: 60%;margin-left:5%">Your Instructions (maximum length: 4000 characters)</div>
                    <div id="charCount">
                        <div id="chars">4000</div>  characters remaining
                    </div>
                    
                </div>

                <div style="width: 100%;display: inline-flex;height:50%;position:relative;padding-bottom:1em;" class="form-group">
                    <textarea id="rejectionComment" maxlength="4000" class="form-control rejectionCommentBox "></textarea>
                </div>

                <div style="width:100%; display: inline-flex; background-color: #E5E7E9;height:auto;padding-bottom:1em;padding-top:1em;">
                    <div style="width:50%; text-align:center">
                        <button type="button" class="btn btn-danger" id="cancelCommentBox">Go Back</button>
                    </div>

                    <div style="width:50%;text-align:center">
                        <button type="button" class="btn btn-primary" id="sendInstruction">Send Instructions</button>
                    </div>

                </div>

            </div>

        </div>

        <!-- end of reject info panel -->

        <script>
            var contentContainer = document.getElementById('mainContainer');

            Hammer(contentContainer).on("swipeleft", function(event) {

                if (headerSectionToEnable.indexOf('amendment_menu') > -1) {
                    headerSectionToEnable.remove('amendment_menu');
                    headerSectionToEnable[headerSectionToEnable.length] = "amendment_menu";
                }

                var getArrayOfSection = headerSectionToEnable;
                var i;
                var activeElement = '';
                for (i = 0; i < getArrayOfSection.length; i++) {

                    var getElement = $j('.' + getArrayOfSection[i]);
                    if (getElement.hasClass('slds-active') && getArrayOfSection[i + 1] != undefined) {

                        $j('.' + getArrayOfSection[i]).removeClass('slds-active');
                        $j('.' + getArrayOfSection[i + 1]).addClass('slds-active');

                        activeElement = $j('.' + getArrayOfSection[i + 1]);
                        break;
                    }

                }
                if (activeElement != '')
                    afterOnclick(activeElement, false);

            });

            Hammer(contentContainer).on("swiperight", function(event) {

                if (headerSectionToEnable.indexOf('amendment_menu') > -1) {
                    headerSectionToEnable.remove('amendment_menu');
                    headerSectionToEnable[headerSectionToEnable.length] = "amendment_menu";
                }

                var getArrayOfSection = headerSectionToEnable;
                var i;
                var activeElement = '';
                for (i = 0; i < getArrayOfSection.length; i++) {

                    var getElement = $j('.' + getArrayOfSection[i]);
                    if (getElement.hasClass('slds-active') && getArrayOfSection[i - 1] != undefined) {

                        $j('.' + getArrayOfSection[i - 1]).addClass('slds-active');
                        $j('.' + getArrayOfSection[i]).removeClass('slds-active');

                        activeElement = $j('.' + getArrayOfSection[i + 1]);
                        break;
                    }
                }
                if (activeElement != '')
                    afterOnclick($j('.' + getArrayOfSection[i - 1]), false);

            });



            // tap events on action icons at footer
            var tapRejectIcon = document.getElementById('rejectIcon');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var rejectIconTapManager = new Hammer.Manager(tapRejectIcon);

            // Single tap recognizer
            rejectIconTapManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            rejectIconTapManager.on("singletap", function(event) {
                $j('textarea#rejectionComment').val('');
                $j('.footer').hide();
                $j('.rejectCommentSection').css('display', 'block');
                

            });


            // tap events on cancel button of Reject Comment Panel
            var tapCancelRejectButton = document.getElementById('cancelCommentBox');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var cancelRejectTapManager = new Hammer.Manager(tapCancelRejectButton);

            // Single tap recognizer
            cancelRejectTapManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            cancelRejectTapManager.on("singletap", function(event) {

                $j('textarea').blur();
                $j('.rejectCommentSection').css('display', 'none');
                $j('.footer').show();
                $j('#chars').text('4000');

            });



            // tap events on Send instruction button of Reject Comment Panel
            var willSaveRejectionCommentControl = document.getElementById('sendInstruction');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var sendInstructionManager = new Hammer.Manager(willSaveRejectionCommentControl);

            // Single tap recognizer
            sendInstructionManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            sendInstructionManager.on("singletap", function(event) {
                
                var instructionText = $j('textarea#rejectionComment').val();
                MinisterApprovalProcessModule.__willShowAfterSavingRejectionComment();

            });


            // tap events on Send instruction button of Reject Comment Panel
            var closeModal = document.getElementById('infoAccepted');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var closeModalManager = new Hammer.Manager(closeModal);

            // Single tap recognizer
            closeModalManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            closeModalManager.on("singletap", function(event) {
                $j('.slds-backdrop--open').css('display', 'none');
            });

            //tap event on mark for dektop editing
            var markForDesktopIcon = document.getElementById('dektopEditingIcon');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var markForDesktopManager = new Hammer.Manager(markForDesktopIcon);

            // Single tap recognizer
            markForDesktopManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            markForDesktopManager.on("singletap", function(event) {
                MinisterApprovalProcessModule.__willShowAfterDeskTopEditing();
            });

            //tap event on Approval 
            var approvalIcon = document.getElementById('approvalIcon');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var approvalManager = new Hammer.Manager(approvalIcon);

            // Single tap recognizer
            approvalManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            approvalManager.on("singletap", function(event) {
                
                MinisterApprovalProcessModule.__willStartApprovalProcess();
            });

            //tap event on Approval cancel
            var approvalCancel = document.getElementById('approvalCancelIcon');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var approvalCancelManager = new Hammer.Manager(approvalCancel);

            // Single tap recognizer
            approvalCancelManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            approvalCancelManager.on("singletap", function(event) {
                $j('.approvalInfoModal').css('display', 'none');
                $j('.slds-backdrop--open').css('display', 'none');
            });


    /*
            //tap event on Preview with Signature
            var previewWithSignatureIcon = document.getElementById('previewWithSignature');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var previewWithSignatureManager = new Hammer.Manager(previewWithSignatureIcon);

            // Single tap recognizer
            previewWithSignatureManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            previewWithSignatureManager.on("singletap", function(event) {
                
                MinisterApprovalProcessModule.__willShowResponseBodyForPreview();
            });

            //tap event on Preview with Signature
            var previewModalCloseTap = document.getElementById('closePreviewModal');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var previewModalCloseTapManager = new Hammer.Manager(previewModalCloseTap);

            // Single tap recognizer
            previewModalCloseTapManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            previewModalCloseTapManager.on("singletap", function(event) {
                $j('.pdfPreviewModal').css('display', 'none');
            });

*/

            //tap event on approve and get next button on Approval Modal
            var getNextForApproval = document.getElementById('nextForApproval');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var getNextForApprovalManager = new Hammer.Manager(getNextForApproval);

            // Single tap recognizer
            getNextForApprovalManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            getNextForApprovalManager.on("singletap", function(event) {

                $j('.approvalInfoModal').css('display', 'none');
                $j('.slds-backdrop--open').css('display', 'none');
                MinisterApprovalProcessModule.__willApproveAndGenerateSignedPDF();

            });

            //tap event on skip to next
            var tapOnSkipToNext = document.getElementById('skipToNext');
            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var tapOnSkipToNextManager = new Hammer.Manager(tapOnSkipToNext);
            // Single tap recognizer
            tapOnSkipToNextManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            tapOnSkipToNextManager.on("singletap", function(event) {
                // set all tabs flag to false before skip to next
                setIncomingPositionFlag = setAdvicePositionFlag = setPrecedentsPositionFlag = setPreviousCorroPositionFlag = setAmendmentPositionFlag = false;

                MinisterApprovalProcessModule.__willShowNextResponseForMOView(false);
            });

            //tap event on approval queue home button
            var tapOnHomeButton = document.getElementById('caseApprovalQueueImage');

            // We create a manager object, which is the same as Hammer(), but without the presetted recognizers. 
            var tapOnHomeButtonManager = new Hammer.Manager(tapOnHomeButton);

            // Single tap recognizer
            tapOnHomeButtonManager.add(new Hammer.Tap({
                event: 'singletap'
            }));

            tapOnHomeButtonManager.on("singletap", function(event) {
                
                pageLoadingController.showLoading();
                viewCaseApprovalQueue();
            });
            
           
            function reAssignCall() {
                   //alert(document.getElementById("ReAssign") + $j('#currentCaseNumber').text());
                   var caseNumber = $j('#currentCaseNumber').text();
                   var caseId = "Select Id, OwnerId From Case Where CaseNumber='"+caseNumber+"'";
                   var resultCaseId = sforce.connection.query(caseId);
                   console.log(caseId + '==== CASEID::' +resultCaseId.records.Id);
                   console.log(caseId + '==== Case Owner ID: ' +resultCaseId.records.OwnerId);
                
                   var CaseOwnerId = resultCaseId.records.OwnerId;
                   var cId = resultCaseId.records.Id;
                   var processinstanceRecord = "Select ProcessInstance.Status,ProcessInstance.TargetObjectId,ProcessInstanceId,OriginalActorId,Id,ActorId From ProcessInstanceWorkitem where ProcessInstance.TargetObjectId = '"+cId+"'"; 
                   var processInstanceData = sforce.connection.query(processinstanceRecord);
                   var currentUserId = sforce.connection.getUserInfo().userId;
                   var currentUserProfile = sforce.connection.getUserInfo().userProfile;
                   var userProfile = '{!$Profile.Name}';
                   //alert(processInstanceData +' === '+ '{!$Profile.Name}');
                   var res;
                   if(processInstanceData.size > 0){
                    var res = processInstanceData.records.ActorId; 
                    //res = str.substring(0, 15);
                    //alert('ActorId===> ' +  ' === '+ res + '===' +currentUserId);
                    }
                    
                    if(processInstanceData.size > 0 && (res == currentUserId || userProfile == 'System Administrator')){ 
                     //alert('Inside If');
                        //Commented by Gary Bakshi
                        //window.open('/apex/Reassign?id='+cId+'&caseOwnerId='+CaseOwnerId,'_parent');
                        
                        sforce.console.openPrimaryTab(null, '/apex/ReassignForConsolex?id=' + cId + '&caseOwnerId=' + CaseOwnerId + ';isdtp=vw', true, 'Reassign', '', null);
                    }
                /*
                    if(result.size == 0 && res != currentUserId){ 
                        alert('No approval associated with this record for Reassigning and you cannot Re-assign this case!'); 
                    }    
                    
                    if(result.size == 0 && res == currentUserId){ 
                        alert('No approval associated with this record for Reassigning!');
                    }
                */
                
                   }
                   
                   
                   
        </script>
        <script type="text/javascript">
        function openPrimaryTab() {
            sforce.console.openPrimaryTab(undefined, 
               'http://www.example.com', true, 'example');
        }
  </script>

        <!-- / JAVASCRIPT -->
        <apex:form >
            <apex:actionFunction name="viewCaseApprovalQueue" action="{!approvalQueueHome}">
                <apex:param id="columnIndex" name="sortByColumnIndex" value="return helperModule.sortedColumnIndex();" />
                <apex:param id="sortIndex" name="sortOrderIndex" value="return helperModule.sortedOrderIndex();" />
            </apex:actionFunction>
        </apex:form>

    </body>

    </html>

</apex:page>