/*------------------------------------------------------------
Author:        Arxxus
Description:   class for generating signed PDF
Test Class:     GeneratePdfPreviewWithSignature_Test
History
<Date>        <Authors Name>     <Brief Description of Change>
12-DEC-2016   Arxxus          Comments and cleanup
11-Apr-2017   Arxxus          Updated. change case status to 'Review' 
                              if conga failed to generate the signed response
17-Apr-2017   Arxxus          Updated. Validate the signature authorisation record 
                              exist after the 'Signed Response' is generated by the conga.
                              Change case status to 'Review' if signature authorisation fails to validate.                              
------------------------------------------------------------*/
public class GeneratePdfPreviewWithSignature {

    public static HttpCalloutMock mock = null;
    public static boolean exceptionInvoked = FALSE;
    public static Map <String,MO_Template_by_Response_Type__c> templateMap = new Map <String,MO_Template_by_Response_Type__c>();
    public static String emailFromAddress = 'Transport Feedback (no reply)';
    public static String fromAddress {get; set;}
    /*------------------------------------------------------------
    Author:        Arxxus
    Description:   generate Signed PDF for preview purpose
    Inputs:        case id, salesforce attachment id, attachment name , user session id , FALSE => approval - TRUE => preview
    History
    <Date>        <Authors Name>     <Brief Description of Change>
    12-DEC-2016   Arxxus          Comments and cleanup
    ------------------------------------------------------------*/
    public static String generate(String caseId, String attachmentId, String attachmentName, String userSessionId, Boolean previewOrApproval) {

        List<ApplicationLogMessage> messages = new List<ApplicationLogMessage>();
        String generatedAttachmentId = '';
        attachmentName = attachmentName.replace(' ', '-');
        attachmentName = attachmentName.replace(':', '-');
        attachmentName = attachmentName.replace('.doc', '');

        try {

            String serverUrl = Url.getSalesforceBaseUrl().toExternalForm() + '/services/Soap/u/29.0/' + UserInfo.getOrganizationId();

            System.debug('Got server url: ' + serverUrl);

            //Replace below URL with your Salesforce instance host
            String endpointURL = 'https://composer.congamerge.com/composer8/index.html' +
                                  '?sessionId=' + userSessionId +
                                  '&serverUrl=' + EncodingUtil.urlEncode(serverUrl, 'UTF-8') +
                                  '&id=' + caseId +
                                  '&TemplateId=' + attachmentId +
                                  '&DefaultPDF=1' +
                                  '&APIMode=1' +
                                  '&OFN=' + attachmentName;

            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpointURL);
            req.setMethod('GET');
            req.setHeader('Authorization', 'OAuth ' + userSessionId);
            req.setHeader('Content-Type', 'application/json');
            req.setTimeout(120000);

            Http http = new Http();

            HttpResponse res;

            if (Test.isRunningTest() && (mock != null))
                res = mock.respond(req);
            else
                res = http.send(req);

            System.debug('Got Conga Response Status :: ' + res.getStatus());
            System.debug('Got Conga Response :: ' + res);
            System.debug('Got Conga Response Body :: ' + res.getBody());

            //checking if reponse from conga is positive, if yes it returns created attachment's id
            if (res.getBody() != NULL && res.getBody().startsWith('00P')) {

                //finding out auto-generated related custom NoteOrAttachment__c record
                List<NoteOrAttachment__c> relatedNoteOrAttachmentRecord = [ SELECT Id, Name, Category__c, Attachment_Id__c
                                                                              FROM NoteOrAttachment__c
                                                                              WHERE Attachment_Id__c = : res.getBody()
                                                                              ORDER BY CreatedDate DESC
                                                                              LIMIT 1 ];
                if (relatedNoteOrAttachmentRecord.size() > 0) {

                    generatedAttachmentId = relatedNoteOrAttachmentRecord[0].Id;

                    if (previewOrApproval == FALSE) {
                        relatedNoteOrAttachmentRecord[0].Category__c = GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE;
                    } else if (previewOrApproval == TRUE) {
                        relatedNoteOrAttachmentRecord[0].Category__c = GlobalConstants.UNSIGNED_RESPONSE;
                    }

                    Attachment actualCongaAttachment = [SELECT Id, Name, ParentId, Body, BodyLength, ContentType FROM Attachment WHERE Id = : res.getBody()];

                    Attachment actualCongaAttachmentCopy = new Attachment();
                    actualCongaAttachmentCopy.Name = actualCongaAttachment.Name;
                    actualCongaAttachmentCopy.Body = actualCongaAttachment.Body;
                    actualCongaAttachmentCopy.ContentType = actualCongaAttachment.ContentType;
                    actualCongaAttachmentCopy.ParentId = relatedNoteOrAttachmentRecord[0].Id;

                    insert actualCongaAttachmentCopy;
                    relatedNoteOrAttachmentRecord[0].Attachment__c = actualCongaAttachmentCopy.Id;

                    update relatedNoteOrAttachmentRecord[0];

                    delete actualCongaAttachment;

                }

            } else {

                exceptionInvoked = TRUE;
                ApplicationLogMessage message = new ApplicationLogMessage();
                message.source = 'GeneratePdfPreviewWithSignature';
                message.sourceFunction = 'generate';
                message.logMessage = 'Conga error: ' + res.getBody();
                message.debugLevel = 'Error';
                messages.add(message);
                ApplicationLogUtility.logMessage(messages);
                messages.clear();
            }

            return generatedAttachmentId;
        } catch (Exception e) {

            exceptionInvoked = TRUE;
            ApplicationLogMessage message = new ApplicationLogMessage();
            message.source = 'GeneratePdfPreviewWithSignature';
            message.sourceFunction = 'generate';
            message.logMessage = e.getMessage();
            message.ex = e;
            message.debugLevel = 'Error';
            messages.add(message);
            ApplicationLogUtility.logMessage(messages);
            messages.clear();

            return generatedAttachmentId;
        }

    }

    /*------------------------------------------------------------
    Author:        Arxxus
    Description:   generate Signed PDF with authorisation validation
    Inputs:        case id, salesforce attachment id, attachment name , user session id , FALSE => approval - TRUE => preview, communication prefernce, user id
    History
    <Date>        <Authors Name>     <Brief Description of Change>
    12-DEC-2016   Arxxus          Comments and cleanup
    17-Apr-2017   Arxxus          Update. FailSafe mechanism fo signature authorisation.
    ------------------------------------------------------------*/
    @future(callout = true)
    public static void generateSignedPDF(String caseId, String attachmentId, String attachmentName, String userSessionId, Boolean previewOrApproval, String communicationPreference, String userId) {

        List<ApplicationLogMessage> messages = new List<ApplicationLogMessage>();
        String generatedAttachmentId = '';
        attachmentName = attachmentName.replace(' ', '-');
        attachmentName = attachmentName.replace(':', '-');
        attachmentName = attachmentName.replace('.doc', '');

        Boolean isTrue;
        List<Digital_Process_Send_Email__c> checkSendEmailProcessList =  [Select Id,Name,On__c FROM Digital_Process_Send_Email__c 
                                                                            WHERE Name =: GlobalConstants.DIGITAL_PROCESS_SEND_EMAIL
                                                                            LIMIT 1];
        isTrue = checkSendEmailProcessList != NULL && checkSendEmailProcessList.size() > 0 ? checkSendEmailProcessList[0].On__c:FALSE;
        
        if(!attachmentName.contains('response_'))
            attachmentName = 'Response-' + attachmentName;

        try {

            String signaturedDocumentId = '';
            String documentId = attachmentId;

            String serverUrl = Url.getSalesforceBaseUrl().toExternalForm() + '/services/Soap/u/29.0/' + UserInfo.getOrganizationId();

            System.debug('Got server url: ' + serverUrl);

            String endpointURL = 'https://composer.congamerge.com/composer8/index.html' +
                                  '?sessionId=' + userSessionId +
                                  '&serverUrl=' + EncodingUtil.urlEncode(serverUrl, 'UTF-8') +
                                  '&id=' + caseId +
                                  '&TemplateId=' + attachmentId +
                                  '&DefaultPDF=1' +
                                  '&APIMode=1' +
                                  '&OFN=' + attachmentName;

            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpointURL);
            req.setMethod('GET');
            req.setHeader('Authorization', 'OAuth ' + userSessionId);
            req.setHeader('Content-Type', 'application/json');
            req.setTimeout(120000);

            Http http = new Http();

            HttpResponse res;

            if (Test.isRunningTest() && (mock != null))
                res = mock.respond(req);
            else
                res = http.send(req);

            System.debug('Got Conga Response Status :: ' + res.getStatus());
            System.debug('Got Conga Response :: ' + res);
            System.debug('Got Conga Response Body :: ' + res.getBody());

            //checking if reponse from conga is positive, if yes it returns created attachment's id
            if (res.getBody() != NULL && res.getBody().startsWith('00P')) {

                //finding out auto-generated related custom NoteOrAttachment__c record
                List<NoteOrAttachment__c> relatedNoteOrAttachmentRecord = [ SELECT Id, Name, Category__c, Attachment_Id__c
                                                                              FROM NoteOrAttachment__c
                                                                              WHERE Attachment_Id__c = : res.getBody()
                                                                              ORDER BY CreatedDate DESC
                                                                              LIMIT 1 ];

                if(relatedNoteOrAttachmentRecord.size() > 0) {

                    generatedAttachmentId = relatedNoteOrAttachmentRecord[0].Id;

                    if(previewOrApproval == FALSE) {
                        relatedNoteOrAttachmentRecord[0].Category__c = GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE;
                    }else if (previewOrApproval == TRUE) {
                        relatedNoteOrAttachmentRecord[0].Category__c = GlobalConstants.UNSIGNED_RESPONSE;
                    }

                    system.debug('relatedNoteOrAttachmentRecord :: ' + relatedNoteOrAttachmentRecord);

                    Attachment actualCongaAttachment = [SELECT Id, Name, ParentId, Body, BodyLength, ContentType FROM Attachment WHERE Id = : res.getBody()];

                    Attachment actualCongaAttachmentCopy = new Attachment();
                    actualCongaAttachmentCopy.Name = actualCongaAttachment.Name;
                    actualCongaAttachmentCopy.Body = actualCongaAttachment.Body;
                    actualCongaAttachmentCopy.ContentType = actualCongaAttachment.ContentType;
                    actualCongaAttachmentCopy.ParentId = relatedNoteOrAttachmentRecord[0].Id;

                    insert actualCongaAttachmentCopy;
                    relatedNoteOrAttachmentRecord[0].Attachment__c = actualCongaAttachmentCopy.Id;

                    update relatedNoteOrAttachmentRecord[0];

                    delete actualCongaAttachment;

                    Case updateCase = new Case();
                    updateCase.Id = caseId;
                    updateCase.SignedPDFGenerationFailed__c = FALSE;

                    Boolean checkAuthorizationRecords = false;
                    List<User> userList = [SELECT Id, Signature_Location__c FROM User WHERE Id =: userId LIMIT 1]   ;

                    // Failsafe mechanism to validate the user's signature
                    if(userList.size() > 0){

                        // validate signature authorisation record only when signature location is popuated on user record.
                        if(userList[0].Signature_Location__c != null && userList[0].Signature_Location__c != ''){
                            
                            signaturedDocumentId = (userList[0].Signature_Location__c).split('=')[1];
                            
                            // get image body from Document
                            List<Document> getAttachmentList  = [Select Id,Body from Document where Id =: signaturedDocumentId limit 1];
                            
                            for(Signature_Authorisation__c getSignatureAuthorisation : [Select Id, Case_Id__c, Document_Id__c,CreatedDate, User_Id__c 
                                                                                        FROM Signature_Authorisation__c 
                                                                                        WHERE User_Id__c =: userId
                                                                                        AND Case_Id__c =: caseId
                                                                                        AND Document_Id__c =: documentId
                                                                                        ORDER BY CreatedDate desc limit 1]) {
                                
                                checkAuthorizationRecords = true;
                                System.debug('checkAuthorizationRecords :: ' + checkAuthorizationRecords);         

                                // set response for this request
                                if(getAttachmentList.size() > 0) {
                                    
                                    /*  When document found after the signature authorisation validation, 
                                        update case status to 'Review' only when 'Digital Process Send Email' custom setting 
                                        has 'On' checkbox unchecked.
                                    */
                                    if(isTrue == FALSE && communicationPreference != GlobalConstants.EZESCAN_CASE_ORIGIN) {                                    
                                        updateCase.Status = GlobalConstants.CASE_REVIEW_STATUS;
                                    }
                                    
                                    updateCase.Signature_Authorisation_Failure__c = false;
                                  
                                        
                                }else{
                                    
                                    if(communicationPreference != GlobalConstants.EZESCAN_CASE_ORIGIN) 
                                        updateCase.Status = GlobalConstants.CASE_REVIEW_STATUS;
                                    
                                    ApplicationLogMessage message = new ApplicationLogMessage();
                                    message.source='GeneratePdfPreviewWithSignature';
                                    message.sourceFunction='generateSignedPDF';
                                    message.logMessage='No signature found after getting validation record.';
                                    message.debugLevel='Error';
                                    messages.add(message);
                                    ApplicationLogUtility.logMessage(messages);
                                    messages.clear();
                                } 
                               
                            }
                            
                            System.debug('checkAuthorizationRecords++ :: ' + checkAuthorizationRecords);         

                            if(checkAuthorizationRecords == false) {
                                
                                if(communicationPreference != GlobalConstants.EZESCAN_CASE_ORIGIN) 
                                    updateCase.Status = GlobalConstants.CASE_REVIEW_STATUS;
                             
                                ApplicationLogMessage message = new ApplicationLogMessage();
                                message.source='GeneratePdfPreviewWithSignature';
                                message.sourceFunction='generateSignedPDF';
                                message.logMessage='No validation record found for signature authorization.';
                                message.debugLevel='Error';
                                messages.add(message);
                                ApplicationLogUtility.logMessage(messages);
                                messages.clear();

                            }

                        }else{

                            if(communicationPreference != GlobalConstants.EZESCAN_CASE_ORIGIN)
                                updateCase.Status = GlobalConstants.CASE_REVIEW_STATUS;
                          
                            ApplicationLogMessage message = new ApplicationLogMessage();
                            message.source='GeneratePdfPreviewWithSignature';
                            message.sourceFunction='generateSignedPDF';
                            message.logMessage='Signature location is not populated on user record.';
                            message.debugLevel='Error';
                            messages.add(message);
                            ApplicationLogUtility.logMessage(messages);
                            messages.clear();
                        } 
                    }

                    System.debug('**Update case :: ' + updateCase );
                    update updateCase;

                    if (communicationPreference == GlobalConstants.EZESCAN_CASE_ORIGIN) {
                        List<Group> queueListForCaseOwner = [Select Id, Name from Group where Name = : GlobalConstants.QUEUE_FOR_READY_OF_PRINTING];
                        if(queueListForCaseOwner.size() > 0) {
                            
                            updateCase.OwnerId = queueListForCaseOwner[0].Id;
                            updateCase.Status = GlobalConstants.CASE_READY_FOR_PRINTING_STATUS_MIN_CORRO;
                            update updateCase;
                           
                        }
                    }else if(communicationPreference == GlobalConstants.MINISTER_COMM_PREFERENCE_EMAIL) {
                        sendEmailAfterApproval(caseId);
                    }
                   
                }

            } else {
               
                if(!Test.isRunningTest()) {
                    Case caseToBeUpdated = new Case();
                    caseToBeUpdated.Id = caseId;
                    caseToBeUpdated.SignedPDFGenerationFailed__c = TRUE;
                    caseToBeUpdated.Status = GlobalConstants.CASE_REVIEW_STATUS;
                    update caseToBeUpdated;
                }
               
                exceptionInvoked = TRUE;
                ApplicationLogMessage message = new ApplicationLogMessage();
                message.source = 'GeneratePdfPreviewWithSignature';
                message.sourceFunction = 'generateSignedPDF';
                message.logMessage = 'Conga error: ' + res.getBody();
                message.debugLevel = 'Error';
                messages.add(message);
                ApplicationLogUtility.logMessage(messages);
                messages.clear();
            }

        } catch(Exception e) {

            if(!Test.isRunningTest()) {
              
                Case caseToBeUpdated = new Case();
                caseToBeUpdated.Id = caseId;
                caseToBeUpdated.SignedPDFGenerationFailed__c = TRUE;
                caseToBeUpdated.Status = GlobalConstants.CASE_REVIEW_STATUS;
                update caseToBeUpdated;
            }

            exceptionInvoked = TRUE;
            ApplicationLogMessage message = new ApplicationLogMessage();
            message.source = 'GeneratePdfPreviewWithSignature';
            message.sourceFunction = 'generateSignedPDF';
            message.logMessage = e.getMessage();
            message.ex = e;
            message.debugLevel = 'Error';
            messages.add(message);
            ApplicationLogUtility.logMessage(messages);
            messages.clear();
        }

    }

    /*------------------------------------------------------------
    Author:        Arxxus
    Description:   send email after signed response is generated. email will be send to Customer,Staff Contact and Additional corro recipients.
    Inputs:        case id
    History
    <Date>        <Authors Name>     <Brief Description of Change>
    12-DEC-2016   Arxxus          Comments and cleanup
    ------------------------------------------------------------*/
    @TestVisible
    private static void sendEmailAfterApproval(String getCurrentCaseId) {

        List<ApplicationLogMessage> messages = new List<ApplicationLogMessage>();
        
        try {

            system.debug('sendEmailAfterApproval called :: ' + getCurrentCaseId);
            
            List<Case> getCaseDetail = [Select Id, Status FROM Case 
                                        WHERE Id = :getCurrentCaseId
                                        AND Status != :GlobalConstants.CASE_REVIEW_STATUS 
                                        AND Signature_Authorisation_Failure__c = false LIMIT 1];

            if(getCaseDetail.size() > 0){

                List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();

                EmailMessage inboundEmail;

                templateMap = MO_Template_by_Response_Type__c.getAll();

                List<Case> getCaseContact = [Select Id, Contact_Email__c, Contact.Id, Response_Type__c, Staff_Contact__c, Staff_Contact__r.Email 
                                              FROM Case 
                                              WHERE Id = : getCurrentCaseId ];

                Id orgWideAddressId;

                List<OrgWideEmailAddress> getOrgWideAddressList = [Select Id, Address 
                                                                    FROM OrgWideEmailAddress 
                                                                    WHERE DisplayName =: emailFromAddress
                                                                    LIMIT 1 ];

                if (getOrgWideAddressList.size() > 0){
                    orgWideAddressId = getOrgWideAddressList[0].Id;
                    fromAddress = getOrgWideAddressList[0].Address;
                }

                String ccemailAddress = '';

                // check custom setting for MO Approval email template
                if(templateMap.containsKey(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE)){

                    // Do not send automatic email to additional corro recepients when response type is 'Referred to other portfolio' and 'Partial Referral' 
                    if( getCaseContact.size() > 0 
                        && ( getCaseContact[0].Response_Type__c != GlobalConstants.CASE_RESPONSE_TYPE_PARTIAL_REFERRAL
                            && getCaseContact[0].Response_Type__c != GlobalConstants.CASE_RESPONSE_TYPE_ADMIN_REFERRAL ) ) {


                        List<Additional_Corro_Recipients__c> corroEmailList = new List <Additional_Corro_Recipients__c> ();
                        
                        // get all additional corro recepients
                        for(Additional_Corro_Recipients__c getAdditionalCorro: [Select Id, Contact__c, Contact__r.Name, Contact__r.Email, Case__c
                                                                                  FROM Additional_Corro_Recipients__c
                                                                                  WHERE Case__c = : getCurrentCaseId ]) {
                            corroEmailList.add(getAdditionalCorro);
                        }

                        Set<String> getAttachmentId = new Set <String> ();

                        if(corroEmailList.size() > 0) {

                            // check custom setting for MO Approval email template
                            //if(templateMap.containsKey(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE)){

                            if(templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Additional_Contacts_Email_Template__c != null){

                                List<EmailTemplate> additionalCorroTemplateId = [Select id from EmailTemplate 
                                                                                    where DeveloperName =: templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Additional_Contacts_Email_Template__c limit 1 ];
                                    // create an email attachment
                                if(additionalCorroTemplateId.size() > 0){

                                    if(templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Additional_Contact_Attachment_Categories__c !=null){
                                
                                        Set<String> categories=new Set<String>(templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Additional_Contact_Attachment_Categories__c.split(','));
                                
                                        // get all categories for additional corro mentioned in custom settings
                                        if(categories.contains(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE)){

                                            // get latest signed response
                                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                                            FROM NoteOrAttachment__c
                                                                            WHERE Case__c = : getCurrentCaseId
                                                                            AND Attachment_Id__c != NULL
                                                                            AND Category__c =: GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE
                                                                            ORDER BY CreatedDate DESC LIMIT 1 ]) {
                                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                                            }

                                        }

                                        // if there is signed response then get all Incoming and Enclosure documents
                                        if(getAttachmentId.size() > 0){

                                            categories.remove(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE);

                                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                                                        FROM NoteOrAttachment__c
                                                                                        WHERE Case__c = : getCurrentCaseId
                                                                                        AND Attachment_Id__c != NULL
                                                                                        AND Category__c IN :categories ]) {
                                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                                            }
                                        }

                                    }

                                    // Create the email attachment
                                    List<Messaging.Emailfileattachment> efaList = new List<Messaging.Emailfileattachment>();

                                    // get all SF attachments required
                                    for(Attachment getAttachment: [SELECT Id, Name, ContentType, Body FROM Attachment WHERE Id IN: getAttachmentId]) {

                                        Messaging.Emailfileattachment efa = new Messaging.Emailfileattachment();
                                        efa.setBody(getAttachment.Body);
                                        efa.setContentType(getAttachment.ContentType);
                                        efa.setInline(false);
                                        efa.setFileName(getAttachment.Name);
                                        efaList.add(efa);
                                    }
                                        
                                    system.debug('sfalist :: ' + efaList);

                                    for(Additional_Corro_Recipients__c tempGetAdditionalCorro: corroEmailList) {

                                        if(tempGetAdditionalCorro.Contact__c != NULL) {
                                            
                                            Messaging.SingleEmailMessage sendCorroEmail = new Messaging.SingleEmailMessage();
                                            
                                            sendCorroEmail.setTemplateID(additionalCorroTemplateId[0].Id);

                                            sendCorroEmail.setWhatId(getCurrentCaseId);
                                            sendCorroEmail.setOrgWideEmailAddressId(orgWideAddressId);

                                            sendCorroEmail.setTargetObjectId(tempGetAdditionalCorro.Contact__c);
                                            sendCorroEmail.setToAddresses(new List < String > {
                                                tempGetAdditionalCorro.Contact__r.Email
                                            });
                                            
                                            if(efaList.size() > 0)
                                                sendCorroEmail.setFileAttachments(efaList);

                                            emails.add(sendCorroEmail);
                                            System.debug('get sendCorroEmail :: ' + sendCorroEmail);
                                        }
                                    }
                                }
                            }
                        }   
                    }

                    if(getCaseContact.size() > 0 && getCaseContact[0].Contact_Email__c != NULL 
                        && templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Contact_Attachment_Categories__c != null
                        && templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Customer_Email_Template__c != null  ) {

                        Messaging.SingleEmailMessage sendEmail = new Messaging.SingleEmailMessage();
                        List<EmailTemplate> templateId = [Select id from EmailTemplate 
                                                            where DeveloperName =: templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Customer_Email_Template__c
                                                            limit 1];

                        if (templateId.size() == 0)
                            return;

                        Set<String> categories=new Set<String>(templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Contact_Attachment_Categories__c.split(','));
                        Set<String> getAttachmentId = new Set <String> ();                
                        // get all categories for additional corro mentioned in custom settings
                        if(categories.contains(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE)){

                            // get latest signed response
                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                            FROM NoteOrAttachment__c
                                                            WHERE Case__c = : getCurrentCaseId
                                                            AND Attachment_Id__c != NULL
                                                            AND Category__c =: GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE
                                                            ORDER BY CreatedDate DESC LIMIT 1 ]) {
                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                            }

                        }

                        // if there is signed response then get all Incoming and Enclosure documents
                        if(getAttachmentId.size() > 0){

                            categories.remove(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE);

                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                                        FROM NoteOrAttachment__c
                                                                        WHERE Case__c = : getCurrentCaseId
                                                                        AND Attachment_Id__c != NULL
                                                                        AND Category__c IN :categories ]) {
                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                            }
                        }
                        
                        // Create the email attachment
                        List<Messaging.Emailfileattachment> efaContactList = new List<Messaging.Emailfileattachment>();
                        
                        // get all SF attachments required
                        for(Attachment getAttachment: [SELECT Id, Name, ContentType, Body FROM Attachment WHERE Id IN: getAttachmentId]) {

                            Messaging.Emailfileattachment efa = new Messaging.Emailfileattachment();
                            efa.setBody(getAttachment.Body);
                            efa.setContentType(getAttachment.ContentType);
                            efa.setInline(false);
                            efa.setFileName(getAttachment.Name);
                            efaContactList.add(efa);
                        }

                        sendEmail.setTemplateID(templateId[0].Id);

                        sendEmail.setWhatId(getCurrentCaseId);
                        sendEmail.setOrgWideEmailAddressId(orgWideAddressId);

                        if(getCaseContact.size() > 0) {
                            sendEmail.setTargetObjectId(getCaseContact[0].Contact.Id);
                            sendEmail.setToAddresses(new List<String> {
                                getCaseContact[0].Contact_Email__c
                            });
                        }

                        if(efaContactList.size() > 0)
                            sendEmail.setFileAttachments(efaContactList);

                        sendEmail.setTreatTargetObjectAsRecipient(false);
                        emails.add(sendEmail);
                        System.debug('get Email :: ' + sendEmail);

                        Messaging.SingleEmailMessage email =
                            Messaging.renderStoredEmailTemplate(templateId[0].Id, getCaseContact[0].Contact.Id, getCurrentCaseId);

                        inboundEmail = new EmailMessage(FromAddress = 'response@transport.nsw.gov.au',
                                                        ToAddress = getCaseContact[0].Contact_Email__c,
                                                        HtmlBody = email.getHTMLBody(),
                                                        Incoming = false,
                                                        ParentId = getCurrentCaseId,
                                                        Subject = email.getSubject(),
                                                        MessageDate = system.now(),
                                                        Status = '3',
                                                        TextBody = email.getPlainTextBody()
                        );

                    }

                    if (getCaseContact.size() > 0 && getCaseContact[0].Staff_Contact__c != NULL 
                        && getCaseContact[0].Staff_Contact__r.Email != NULL
                        && templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Staff_Attachment_Categories__c != null
                        && templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Staff_Email_Template__c != null ) {
                        
                        Messaging.SingleEmailMessage sendStaffContactEmail = new Messaging.SingleEmailMessage();
                        List <EmailTemplate> staffTemplateId = [Select id from EmailTemplate 
                                                                where DeveloperName =: templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Staff_Email_Template__c
                                                                limit 1];

                        if (staffTemplateId.size() == 0)
                            return;

                        Set<String> categories=new Set<String>(templateMap.get(GlobalConstants.MO_APPROVAL_EMAIL_TEMPLATE_TYPE).Staff_Attachment_Categories__c.split(','));
                        Set<String> getAttachmentId = new Set <String> ();

                        // get all categories for additional corro mentioned in custom settings
                        if(categories.contains(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE)){

                            // get latest signed response
                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                            FROM NoteOrAttachment__c
                                                            WHERE Case__c = : getCurrentCaseId
                                                            AND Attachment_Id__c != NULL
                                                            AND Category__c =: GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE
                                                            ORDER BY CreatedDate DESC LIMIT 1 ]) {
                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                            }

                        }

                        // if there is signed response then get all Incoming and Enclosure documents
                        if(getAttachmentId.size() > 0){

                            categories.remove(GlobalConstants.ATTACHMENT_CATEGORY_SIGNED_RESPONSE);

                            for(NoteOrAttachment__c customAttachment: [Select Id, Name, Case__c, Attachment_Id__c, Category__c
                                                                        FROM NoteOrAttachment__c
                                                                        WHERE Case__c = : getCurrentCaseId
                                                                        AND Attachment_Id__c != NULL
                                                                        AND Category__c IN :categories ]) {
                                getAttachmentId.add(customAttachment.Attachment_Id__c);
                            }
                        }
                        
                        // Create the email attachment
                        List<Messaging.Emailfileattachment> efaStaffList = new List<Messaging.Emailfileattachment>();
                        
                        // get all SF attachments required
                        for(Attachment getAttachment: [SELECT Id, Name, ContentType, Body FROM Attachment WHERE Id IN: getAttachmentId]) {

                            Messaging.Emailfileattachment efa = new Messaging.Emailfileattachment();
                            efa.setBody(getAttachment.Body);
                            efa.setContentType(getAttachment.ContentType);
                            efa.setInline(false);
                            efa.setFileName(getAttachment.Name);
                            efaStaffList.add(efa);
                        }    

                        sendStaffContactEmail.setTemplateID(staffTemplateId[0].Id);

                        sendStaffContactEmail.setWhatId(getCurrentCaseId);
                        sendStaffContactEmail.setOrgWideEmailAddressId(orgWideAddressId);

                        sendStaffContactEmail.setTargetObjectId(getCaseContact[0].Staff_Contact__c);
                        sendStaffContactEmail.setToAddresses(new List < String > {
                            getCaseContact[0].Staff_Contact__r.Email
                        });

                        sendStaffContactEmail.setSaveAsActivity(false);

                        if(efaStaffList.size() > 0)
                            sendStaffContactEmail.setFileAttachments(efaStaffList);

                        emails.add(sendStaffContactEmail);
                        System.debug('get sendStaffContactEmail :: ' + sendStaffContactEmail);

                    }
                }    

                System.debug('get Emails :: ' + emails);

                Messaging.SendEmailResult[] r = Messaging.sendEmail(emails);

                if(r[0].isSuccess()) {

                    Case updateCase = new Case();
                    updateCase.Id = getCurrentCaseId;
                    updateCase.Status = GlobalConstants.MO_SIGNED_AND_EMAILED_MIN_CORRO;
                    update updateCase;

                    insert inboundEmail;

                    System.debug('get attachments :: ' + emails[0].getFileAttachments());

                    if(emails[0].getFileAttachments() != null) {
                        Attachment[] attachments = new Attachment[] {};
                        Attachment attachment = null;
                        for(Integer i = 0; i < emails[0].getFileAttachments().size(); i++) {
                            attachment = new Attachment();
                            attachment.Name = emails[0].getFileAttachments()[i].getFileName();
                            attachment.Body = emails[0].getFileAttachments()[i].getBody();
                            attachment.ParentId = inboundEmail.Id;
                            attachment.ContentType = emails[0].getFileAttachments()[i].getContentType();
                            attachments.add(attachment);
                        }
                        insert attachments;
                    }

                }
                       
                System.debug('Emails Error:' + r);
            }
            

        } catch (Exception e) {
            exceptionInvoked = TRUE;
            ApplicationLogMessage message = new ApplicationLogMessage();
            message.source = 'GeneratePdfPreviewWithSignature';
            message.sourceFunction = 'sendEmailAfterApproval';
            message.logMessage = e.getMessage();
            message.ex = e;
            message.debugLevel = 'Error';
            messages.add(message);
            ApplicationLogUtility.logMessage(messages);
            messages.clear();
        }
    }
}